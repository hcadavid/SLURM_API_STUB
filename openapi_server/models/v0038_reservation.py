from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.v0038_reservation_purge_completed import V0038ReservationPurgeCompleted
from openapi_server import util

from openapi_server.models.v0038_reservation_purge_completed import V0038ReservationPurgeCompleted  # noqa: E501

class V0038Reservation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accounts=None, burst_buffer=None, core_count=None, core_spec_cnt=None, end_time=None, features=None, flags=None, groups=None, licenses=None, max_start_delay=None, name=None, node_count=None, node_list=None, partition=None, purge_completed=None, start_time=None, watts=None, tres=None, users=None):  # noqa: E501
        """V0038Reservation - a model defined in OpenAPI

        :param accounts: The accounts of this V0038Reservation.  # noqa: E501
        :type accounts: str
        :param burst_buffer: The burst_buffer of this V0038Reservation.  # noqa: E501
        :type burst_buffer: str
        :param core_count: The core_count of this V0038Reservation.  # noqa: E501
        :type core_count: int
        :param core_spec_cnt: The core_spec_cnt of this V0038Reservation.  # noqa: E501
        :type core_spec_cnt: int
        :param end_time: The end_time of this V0038Reservation.  # noqa: E501
        :type end_time: int
        :param features: The features of this V0038Reservation.  # noqa: E501
        :type features: str
        :param flags: The flags of this V0038Reservation.  # noqa: E501
        :type flags: List[str]
        :param groups: The groups of this V0038Reservation.  # noqa: E501
        :type groups: str
        :param licenses: The licenses of this V0038Reservation.  # noqa: E501
        :type licenses: str
        :param max_start_delay: The max_start_delay of this V0038Reservation.  # noqa: E501
        :type max_start_delay: int
        :param name: The name of this V0038Reservation.  # noqa: E501
        :type name: str
        :param node_count: The node_count of this V0038Reservation.  # noqa: E501
        :type node_count: int
        :param node_list: The node_list of this V0038Reservation.  # noqa: E501
        :type node_list: str
        :param partition: The partition of this V0038Reservation.  # noqa: E501
        :type partition: str
        :param purge_completed: The purge_completed of this V0038Reservation.  # noqa: E501
        :type purge_completed: V0038ReservationPurgeCompleted
        :param start_time: The start_time of this V0038Reservation.  # noqa: E501
        :type start_time: int
        :param watts: The watts of this V0038Reservation.  # noqa: E501
        :type watts: int
        :param tres: The tres of this V0038Reservation.  # noqa: E501
        :type tres: str
        :param users: The users of this V0038Reservation.  # noqa: E501
        :type users: str
        """
        self.openapi_types = {
            'accounts': str,
            'burst_buffer': str,
            'core_count': int,
            'core_spec_cnt': int,
            'end_time': int,
            'features': str,
            'flags': List[str],
            'groups': str,
            'licenses': str,
            'max_start_delay': int,
            'name': str,
            'node_count': int,
            'node_list': str,
            'partition': str,
            'purge_completed': V0038ReservationPurgeCompleted,
            'start_time': int,
            'watts': int,
            'tres': str,
            'users': str
        }

        self.attribute_map = {
            'accounts': 'accounts',
            'burst_buffer': 'burst_buffer',
            'core_count': 'core_count',
            'core_spec_cnt': 'core_spec_cnt',
            'end_time': 'end_time',
            'features': 'features',
            'flags': 'flags',
            'groups': 'groups',
            'licenses': 'licenses',
            'max_start_delay': 'max_start_delay',
            'name': 'name',
            'node_count': 'node_count',
            'node_list': 'node_list',
            'partition': 'partition',
            'purge_completed': 'purge_completed',
            'start_time': 'start_time',
            'watts': 'watts',
            'tres': 'tres',
            'users': 'users'
        }

        self._accounts = accounts
        self._burst_buffer = burst_buffer
        self._core_count = core_count
        self._core_spec_cnt = core_spec_cnt
        self._end_time = end_time
        self._features = features
        self._flags = flags
        self._groups = groups
        self._licenses = licenses
        self._max_start_delay = max_start_delay
        self._name = name
        self._node_count = node_count
        self._node_list = node_list
        self._partition = partition
        self._purge_completed = purge_completed
        self._start_time = start_time
        self._watts = watts
        self._tres = tres
        self._users = users

    @classmethod
    def from_dict(cls, dikt) -> 'V0038Reservation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The v0.0.38_reservation of this V0038Reservation.  # noqa: E501
        :rtype: V0038Reservation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accounts(self) -> str:
        """Gets the accounts of this V0038Reservation.

        Allowed accounts  # noqa: E501

        :return: The accounts of this V0038Reservation.
        :rtype: str
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts: str):
        """Sets the accounts of this V0038Reservation.

        Allowed accounts  # noqa: E501

        :param accounts: The accounts of this V0038Reservation.
        :type accounts: str
        """

        self._accounts = accounts

    @property
    def burst_buffer(self) -> str:
        """Gets the burst_buffer of this V0038Reservation.

        Reserved burst buffer  # noqa: E501

        :return: The burst_buffer of this V0038Reservation.
        :rtype: str
        """
        return self._burst_buffer

    @burst_buffer.setter
    def burst_buffer(self, burst_buffer: str):
        """Sets the burst_buffer of this V0038Reservation.

        Reserved burst buffer  # noqa: E501

        :param burst_buffer: The burst_buffer of this V0038Reservation.
        :type burst_buffer: str
        """

        self._burst_buffer = burst_buffer

    @property
    def core_count(self) -> int:
        """Gets the core_count of this V0038Reservation.

        Number of reserved cores  # noqa: E501

        :return: The core_count of this V0038Reservation.
        :rtype: int
        """
        return self._core_count

    @core_count.setter
    def core_count(self, core_count: int):
        """Sets the core_count of this V0038Reservation.

        Number of reserved cores  # noqa: E501

        :param core_count: The core_count of this V0038Reservation.
        :type core_count: int
        """

        self._core_count = core_count

    @property
    def core_spec_cnt(self) -> int:
        """Gets the core_spec_cnt of this V0038Reservation.

        Number of reserved specialized cores  # noqa: E501

        :return: The core_spec_cnt of this V0038Reservation.
        :rtype: int
        """
        return self._core_spec_cnt

    @core_spec_cnt.setter
    def core_spec_cnt(self, core_spec_cnt: int):
        """Sets the core_spec_cnt of this V0038Reservation.

        Number of reserved specialized cores  # noqa: E501

        :param core_spec_cnt: The core_spec_cnt of this V0038Reservation.
        :type core_spec_cnt: int
        """

        self._core_spec_cnt = core_spec_cnt

    @property
    def end_time(self) -> int:
        """Gets the end_time of this V0038Reservation.

        End time of the reservation  # noqa: E501

        :return: The end_time of this V0038Reservation.
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time: int):
        """Sets the end_time of this V0038Reservation.

        End time of the reservation  # noqa: E501

        :param end_time: The end_time of this V0038Reservation.
        :type end_time: int
        """

        self._end_time = end_time

    @property
    def features(self) -> str:
        """Gets the features of this V0038Reservation.

        List of features  # noqa: E501

        :return: The features of this V0038Reservation.
        :rtype: str
        """
        return self._features

    @features.setter
    def features(self, features: str):
        """Sets the features of this V0038Reservation.

        List of features  # noqa: E501

        :param features: The features of this V0038Reservation.
        :type features: str
        """

        self._features = features

    @property
    def flags(self) -> List[str]:
        """Gets the flags of this V0038Reservation.

        Reservation options  # noqa: E501

        :return: The flags of this V0038Reservation.
        :rtype: List[str]
        """
        return self._flags

    @flags.setter
    def flags(self, flags: List[str]):
        """Sets the flags of this V0038Reservation.

        Reservation options  # noqa: E501

        :param flags: The flags of this V0038Reservation.
        :type flags: List[str]
        """

        self._flags = flags

    @property
    def groups(self) -> str:
        """Gets the groups of this V0038Reservation.

        List of groups permitted to use the reserved nodes  # noqa: E501

        :return: The groups of this V0038Reservation.
        :rtype: str
        """
        return self._groups

    @groups.setter
    def groups(self, groups: str):
        """Sets the groups of this V0038Reservation.

        List of groups permitted to use the reserved nodes  # noqa: E501

        :param groups: The groups of this V0038Reservation.
        :type groups: str
        """

        self._groups = groups

    @property
    def licenses(self) -> str:
        """Gets the licenses of this V0038Reservation.

        List of licenses  # noqa: E501

        :return: The licenses of this V0038Reservation.
        :rtype: str
        """
        return self._licenses

    @licenses.setter
    def licenses(self, licenses: str):
        """Sets the licenses of this V0038Reservation.

        List of licenses  # noqa: E501

        :param licenses: The licenses of this V0038Reservation.
        :type licenses: str
        """

        self._licenses = licenses

    @property
    def max_start_delay(self) -> int:
        """Gets the max_start_delay of this V0038Reservation.

        Maximum delay in which jobs outside of the reservation will be permitted to overlap once any jobs are queued for the reservation  # noqa: E501

        :return: The max_start_delay of this V0038Reservation.
        :rtype: int
        """
        return self._max_start_delay

    @max_start_delay.setter
    def max_start_delay(self, max_start_delay: int):
        """Sets the max_start_delay of this V0038Reservation.

        Maximum delay in which jobs outside of the reservation will be permitted to overlap once any jobs are queued for the reservation  # noqa: E501

        :param max_start_delay: The max_start_delay of this V0038Reservation.
        :type max_start_delay: int
        """

        self._max_start_delay = max_start_delay

    @property
    def name(self) -> str:
        """Gets the name of this V0038Reservation.

        Reservationn name  # noqa: E501

        :return: The name of this V0038Reservation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this V0038Reservation.

        Reservationn name  # noqa: E501

        :param name: The name of this V0038Reservation.
        :type name: str
        """

        self._name = name

    @property
    def node_count(self) -> int:
        """Gets the node_count of this V0038Reservation.

        Count of nodes reserved  # noqa: E501

        :return: The node_count of this V0038Reservation.
        :rtype: int
        """
        return self._node_count

    @node_count.setter
    def node_count(self, node_count: int):
        """Sets the node_count of this V0038Reservation.

        Count of nodes reserved  # noqa: E501

        :param node_count: The node_count of this V0038Reservation.
        :type node_count: int
        """

        self._node_count = node_count

    @property
    def node_list(self) -> str:
        """Gets the node_list of this V0038Reservation.

        List of reserved nodes  # noqa: E501

        :return: The node_list of this V0038Reservation.
        :rtype: str
        """
        return self._node_list

    @node_list.setter
    def node_list(self, node_list: str):
        """Sets the node_list of this V0038Reservation.

        List of reserved nodes  # noqa: E501

        :param node_list: The node_list of this V0038Reservation.
        :type node_list: str
        """

        self._node_list = node_list

    @property
    def partition(self) -> str:
        """Gets the partition of this V0038Reservation.

        Partition  # noqa: E501

        :return: The partition of this V0038Reservation.
        :rtype: str
        """
        return self._partition

    @partition.setter
    def partition(self, partition: str):
        """Sets the partition of this V0038Reservation.

        Partition  # noqa: E501

        :param partition: The partition of this V0038Reservation.
        :type partition: str
        """

        self._partition = partition

    @property
    def purge_completed(self) -> V0038ReservationPurgeCompleted:
        """Gets the purge_completed of this V0038Reservation.


        :return: The purge_completed of this V0038Reservation.
        :rtype: V0038ReservationPurgeCompleted
        """
        return self._purge_completed

    @purge_completed.setter
    def purge_completed(self, purge_completed: V0038ReservationPurgeCompleted):
        """Sets the purge_completed of this V0038Reservation.


        :param purge_completed: The purge_completed of this V0038Reservation.
        :type purge_completed: V0038ReservationPurgeCompleted
        """

        self._purge_completed = purge_completed

    @property
    def start_time(self) -> int:
        """Gets the start_time of this V0038Reservation.

        Start time of reservation  # noqa: E501

        :return: The start_time of this V0038Reservation.
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time: int):
        """Sets the start_time of this V0038Reservation.

        Start time of reservation  # noqa: E501

        :param start_time: The start_time of this V0038Reservation.
        :type start_time: int
        """

        self._start_time = start_time

    @property
    def watts(self) -> int:
        """Gets the watts of this V0038Reservation.

        amount of power to reserve in watts  # noqa: E501

        :return: The watts of this V0038Reservation.
        :rtype: int
        """
        return self._watts

    @watts.setter
    def watts(self, watts: int):
        """Sets the watts of this V0038Reservation.

        amount of power to reserve in watts  # noqa: E501

        :param watts: The watts of this V0038Reservation.
        :type watts: int
        """

        self._watts = watts

    @property
    def tres(self) -> str:
        """Gets the tres of this V0038Reservation.

        List of TRES  # noqa: E501

        :return: The tres of this V0038Reservation.
        :rtype: str
        """
        return self._tres

    @tres.setter
    def tres(self, tres: str):
        """Sets the tres of this V0038Reservation.

        List of TRES  # noqa: E501

        :param tres: The tres of this V0038Reservation.
        :type tres: str
        """

        self._tres = tres

    @property
    def users(self) -> str:
        """Gets the users of this V0038Reservation.

        List of users  # noqa: E501

        :return: The users of this V0038Reservation.
        :rtype: str
        """
        return self._users

    @users.setter
    def users(self, users: str):
        """Sets the users of this V0038Reservation.

        List of users  # noqa: E501

        :param users: The users of this V0038Reservation.
        :type users: str
        """

        self._users = users
