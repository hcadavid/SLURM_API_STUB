from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
import re
from openapi_server import util

import re  # noqa: E501

class V0038JobProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account=None, account_gather_frequency=None, argv=None, array=None, batch_features=None, begin_time=None, burst_buffer=None, cluster_constraint=None, comment=None, constraints=None, container=None, core_specification=None, cores_per_socket=None, cpu_binding=None, cpu_binding_hint=None, cpu_frequency=None, cpus_per_gpu=None, cpus_per_task=None, current_working_directory=None, deadline=None, delay_boot=None, dependency=None, distribution=None, environment=None, exclusive=None, get_user_environment=None, gres=None, gres_flags=None, gpu_binding=None, gpu_frequency=None, gpus=None, gpus_per_node=None, gpus_per_socket=None, gpus_per_task=None, hold=None, kill_on_invalid_dependency=None, licenses=None, mail_type=None, mail_user=None, mcs_label=None, memory_binding=None, memory_per_cpu=None, memory_per_gpu=None, memory_per_node=None, minimum_cpus_per_node=None, minimum_nodes=None, name=None, nice=None, no_kill=None, nodes=None, open_mode='append', oversubscribe=False, partition=None, prefer=None, priority=None, qos=None, requeue=None, reservation=None, signal=None, sockets_per_node=None, spread_job=None, standard_error=None, standard_input=None, standard_output=None, tasks=None, tasks_per_core=None, tasks_per_node=None, tasks_per_socket=None, thread_specification=None, threads_per_core=None, time_limit=None, time_minimum=None, wait_all_nodes=None, wckey=None):  # noqa: E501
        """V0038JobProperties - a model defined in OpenAPI

        :param account: The account of this V0038JobProperties.  # noqa: E501
        :type account: str
        :param account_gather_frequency: The account_gather_frequency of this V0038JobProperties.  # noqa: E501
        :type account_gather_frequency: str
        :param argv: The argv of this V0038JobProperties.  # noqa: E501
        :type argv: List[str]
        :param array: The array of this V0038JobProperties.  # noqa: E501
        :type array: str
        :param batch_features: The batch_features of this V0038JobProperties.  # noqa: E501
        :type batch_features: str
        :param begin_time: The begin_time of this V0038JobProperties.  # noqa: E501
        :type begin_time: int
        :param burst_buffer: The burst_buffer of this V0038JobProperties.  # noqa: E501
        :type burst_buffer: str
        :param cluster_constraint: The cluster_constraint of this V0038JobProperties.  # noqa: E501
        :type cluster_constraint: str
        :param comment: The comment of this V0038JobProperties.  # noqa: E501
        :type comment: str
        :param constraints: The constraints of this V0038JobProperties.  # noqa: E501
        :type constraints: str
        :param container: The container of this V0038JobProperties.  # noqa: E501
        :type container: str
        :param core_specification: The core_specification of this V0038JobProperties.  # noqa: E501
        :type core_specification: int
        :param cores_per_socket: The cores_per_socket of this V0038JobProperties.  # noqa: E501
        :type cores_per_socket: int
        :param cpu_binding: The cpu_binding of this V0038JobProperties.  # noqa: E501
        :type cpu_binding: str
        :param cpu_binding_hint: The cpu_binding_hint of this V0038JobProperties.  # noqa: E501
        :type cpu_binding_hint: str
        :param cpu_frequency: The cpu_frequency of this V0038JobProperties.  # noqa: E501
        :type cpu_frequency: str
        :param cpus_per_gpu: The cpus_per_gpu of this V0038JobProperties.  # noqa: E501
        :type cpus_per_gpu: str
        :param cpus_per_task: The cpus_per_task of this V0038JobProperties.  # noqa: E501
        :type cpus_per_task: int
        :param current_working_directory: The current_working_directory of this V0038JobProperties.  # noqa: E501
        :type current_working_directory: str
        :param deadline: The deadline of this V0038JobProperties.  # noqa: E501
        :type deadline: str
        :param delay_boot: The delay_boot of this V0038JobProperties.  # noqa: E501
        :type delay_boot: int
        :param dependency: The dependency of this V0038JobProperties.  # noqa: E501
        :type dependency: str
        :param distribution: The distribution of this V0038JobProperties.  # noqa: E501
        :type distribution: str
        :param environment: The environment of this V0038JobProperties.  # noqa: E501
        :type environment: object
        :param exclusive: The exclusive of this V0038JobProperties.  # noqa: E501
        :type exclusive: str
        :param get_user_environment: The get_user_environment of this V0038JobProperties.  # noqa: E501
        :type get_user_environment: bool
        :param gres: The gres of this V0038JobProperties.  # noqa: E501
        :type gres: str
        :param gres_flags: The gres_flags of this V0038JobProperties.  # noqa: E501
        :type gres_flags: str
        :param gpu_binding: The gpu_binding of this V0038JobProperties.  # noqa: E501
        :type gpu_binding: str
        :param gpu_frequency: The gpu_frequency of this V0038JobProperties.  # noqa: E501
        :type gpu_frequency: str
        :param gpus: The gpus of this V0038JobProperties.  # noqa: E501
        :type gpus: str
        :param gpus_per_node: The gpus_per_node of this V0038JobProperties.  # noqa: E501
        :type gpus_per_node: str
        :param gpus_per_socket: The gpus_per_socket of this V0038JobProperties.  # noqa: E501
        :type gpus_per_socket: str
        :param gpus_per_task: The gpus_per_task of this V0038JobProperties.  # noqa: E501
        :type gpus_per_task: str
        :param hold: The hold of this V0038JobProperties.  # noqa: E501
        :type hold: bool
        :param kill_on_invalid_dependency: The kill_on_invalid_dependency of this V0038JobProperties.  # noqa: E501
        :type kill_on_invalid_dependency: bool
        :param licenses: The licenses of this V0038JobProperties.  # noqa: E501
        :type licenses: str
        :param mail_type: The mail_type of this V0038JobProperties.  # noqa: E501
        :type mail_type: str
        :param mail_user: The mail_user of this V0038JobProperties.  # noqa: E501
        :type mail_user: str
        :param mcs_label: The mcs_label of this V0038JobProperties.  # noqa: E501
        :type mcs_label: str
        :param memory_binding: The memory_binding of this V0038JobProperties.  # noqa: E501
        :type memory_binding: str
        :param memory_per_cpu: The memory_per_cpu of this V0038JobProperties.  # noqa: E501
        :type memory_per_cpu: int
        :param memory_per_gpu: The memory_per_gpu of this V0038JobProperties.  # noqa: E501
        :type memory_per_gpu: int
        :param memory_per_node: The memory_per_node of this V0038JobProperties.  # noqa: E501
        :type memory_per_node: int
        :param minimum_cpus_per_node: The minimum_cpus_per_node of this V0038JobProperties.  # noqa: E501
        :type minimum_cpus_per_node: int
        :param minimum_nodes: The minimum_nodes of this V0038JobProperties.  # noqa: E501
        :type minimum_nodes: bool
        :param name: The name of this V0038JobProperties.  # noqa: E501
        :type name: str
        :param nice: The nice of this V0038JobProperties.  # noqa: E501
        :type nice: int
        :param no_kill: The no_kill of this V0038JobProperties.  # noqa: E501
        :type no_kill: bool
        :param nodes: The nodes of this V0038JobProperties.  # noqa: E501
        :type nodes: List[int]
        :param open_mode: The open_mode of this V0038JobProperties.  # noqa: E501
        :type open_mode: str
        :param oversubscribe: The oversubscribe of this V0038JobProperties.  # noqa: E501
        :type oversubscribe: bool
        :param partition: The partition of this V0038JobProperties.  # noqa: E501
        :type partition: str
        :param prefer: The prefer of this V0038JobProperties.  # noqa: E501
        :type prefer: str
        :param priority: The priority of this V0038JobProperties.  # noqa: E501
        :type priority: str
        :param qos: The qos of this V0038JobProperties.  # noqa: E501
        :type qos: str
        :param requeue: The requeue of this V0038JobProperties.  # noqa: E501
        :type requeue: bool
        :param reservation: The reservation of this V0038JobProperties.  # noqa: E501
        :type reservation: str
        :param signal: The signal of this V0038JobProperties.  # noqa: E501
        :type signal: str
        :param sockets_per_node: The sockets_per_node of this V0038JobProperties.  # noqa: E501
        :type sockets_per_node: int
        :param spread_job: The spread_job of this V0038JobProperties.  # noqa: E501
        :type spread_job: bool
        :param standard_error: The standard_error of this V0038JobProperties.  # noqa: E501
        :type standard_error: str
        :param standard_input: The standard_input of this V0038JobProperties.  # noqa: E501
        :type standard_input: str
        :param standard_output: The standard_output of this V0038JobProperties.  # noqa: E501
        :type standard_output: str
        :param tasks: The tasks of this V0038JobProperties.  # noqa: E501
        :type tasks: int
        :param tasks_per_core: The tasks_per_core of this V0038JobProperties.  # noqa: E501
        :type tasks_per_core: int
        :param tasks_per_node: The tasks_per_node of this V0038JobProperties.  # noqa: E501
        :type tasks_per_node: int
        :param tasks_per_socket: The tasks_per_socket of this V0038JobProperties.  # noqa: E501
        :type tasks_per_socket: int
        :param thread_specification: The thread_specification of this V0038JobProperties.  # noqa: E501
        :type thread_specification: int
        :param threads_per_core: The threads_per_core of this V0038JobProperties.  # noqa: E501
        :type threads_per_core: int
        :param time_limit: The time_limit of this V0038JobProperties.  # noqa: E501
        :type time_limit: int
        :param time_minimum: The time_minimum of this V0038JobProperties.  # noqa: E501
        :type time_minimum: int
        :param wait_all_nodes: The wait_all_nodes of this V0038JobProperties.  # noqa: E501
        :type wait_all_nodes: bool
        :param wckey: The wckey of this V0038JobProperties.  # noqa: E501
        :type wckey: str
        """
        self.openapi_types = {
            'account': str,
            'account_gather_frequency': str,
            'argv': List[str],
            'array': str,
            'batch_features': str,
            'begin_time': int,
            'burst_buffer': str,
            'cluster_constraint': str,
            'comment': str,
            'constraints': str,
            'container': str,
            'core_specification': int,
            'cores_per_socket': int,
            'cpu_binding': str,
            'cpu_binding_hint': str,
            'cpu_frequency': str,
            'cpus_per_gpu': str,
            'cpus_per_task': int,
            'current_working_directory': str,
            'deadline': str,
            'delay_boot': int,
            'dependency': str,
            'distribution': str,
            'environment': object,
            'exclusive': str,
            'get_user_environment': bool,
            'gres': str,
            'gres_flags': str,
            'gpu_binding': str,
            'gpu_frequency': str,
            'gpus': str,
            'gpus_per_node': str,
            'gpus_per_socket': str,
            'gpus_per_task': str,
            'hold': bool,
            'kill_on_invalid_dependency': bool,
            'licenses': str,
            'mail_type': str,
            'mail_user': str,
            'mcs_label': str,
            'memory_binding': str,
            'memory_per_cpu': int,
            'memory_per_gpu': int,
            'memory_per_node': int,
            'minimum_cpus_per_node': int,
            'minimum_nodes': bool,
            'name': str,
            'nice': int,
            'no_kill': bool,
            'nodes': List[int],
            'open_mode': str,
            'oversubscribe': bool,
            'partition': str,
            'prefer': str,
            'priority': str,
            'qos': str,
            'requeue': bool,
            'reservation': str,
            'signal': str,
            'sockets_per_node': int,
            'spread_job': bool,
            'standard_error': str,
            'standard_input': str,
            'standard_output': str,
            'tasks': int,
            'tasks_per_core': int,
            'tasks_per_node': int,
            'tasks_per_socket': int,
            'thread_specification': int,
            'threads_per_core': int,
            'time_limit': int,
            'time_minimum': int,
            'wait_all_nodes': bool,
            'wckey': str
        }

        self.attribute_map = {
            'account': 'account',
            'account_gather_frequency': 'account_gather_frequency',
            'argv': 'argv',
            'array': 'array',
            'batch_features': 'batch_features',
            'begin_time': 'begin_time',
            'burst_buffer': 'burst_buffer',
            'cluster_constraint': 'cluster_constraint',
            'comment': 'comment',
            'constraints': 'constraints',
            'container': 'container',
            'core_specification': 'core_specification',
            'cores_per_socket': 'cores_per_socket',
            'cpu_binding': 'cpu_binding',
            'cpu_binding_hint': 'cpu_binding_hint',
            'cpu_frequency': 'cpu_frequency',
            'cpus_per_gpu': 'cpus_per_gpu',
            'cpus_per_task': 'cpus_per_task',
            'current_working_directory': 'current_working_directory',
            'deadline': 'deadline',
            'delay_boot': 'delay_boot',
            'dependency': 'dependency',
            'distribution': 'distribution',
            'environment': 'environment',
            'exclusive': 'exclusive',
            'get_user_environment': 'get_user_environment',
            'gres': 'gres',
            'gres_flags': 'gres_flags',
            'gpu_binding': 'gpu_binding',
            'gpu_frequency': 'gpu_frequency',
            'gpus': 'gpus',
            'gpus_per_node': 'gpus_per_node',
            'gpus_per_socket': 'gpus_per_socket',
            'gpus_per_task': 'gpus_per_task',
            'hold': 'hold',
            'kill_on_invalid_dependency': 'kill_on_invalid_dependency',
            'licenses': 'licenses',
            'mail_type': 'mail_type',
            'mail_user': 'mail_user',
            'mcs_label': 'mcs_label',
            'memory_binding': 'memory_binding',
            'memory_per_cpu': 'memory_per_cpu',
            'memory_per_gpu': 'memory_per_gpu',
            'memory_per_node': 'memory_per_node',
            'minimum_cpus_per_node': 'minimum_cpus_per_node',
            'minimum_nodes': 'minimum_nodes',
            'name': 'name',
            'nice': 'nice',
            'no_kill': 'no_kill',
            'nodes': 'nodes',
            'open_mode': 'open_mode',
            'oversubscribe': 'oversubscribe',
            'partition': 'partition',
            'prefer': 'prefer',
            'priority': 'priority',
            'qos': 'qos',
            'requeue': 'requeue',
            'reservation': 'reservation',
            'signal': 'signal',
            'sockets_per_node': 'sockets_per_node',
            'spread_job': 'spread_job',
            'standard_error': 'standard_error',
            'standard_input': 'standard_input',
            'standard_output': 'standard_output',
            'tasks': 'tasks',
            'tasks_per_core': 'tasks_per_core',
            'tasks_per_node': 'tasks_per_node',
            'tasks_per_socket': 'tasks_per_socket',
            'thread_specification': 'thread_specification',
            'threads_per_core': 'threads_per_core',
            'time_limit': 'time_limit',
            'time_minimum': 'time_minimum',
            'wait_all_nodes': 'wait_all_nodes',
            'wckey': 'wckey'
        }

        self._account = account
        self._account_gather_frequency = account_gather_frequency
        self._argv = argv
        self._array = array
        self._batch_features = batch_features
        self._begin_time = begin_time
        self._burst_buffer = burst_buffer
        self._cluster_constraint = cluster_constraint
        self._comment = comment
        self._constraints = constraints
        self._container = container
        self._core_specification = core_specification
        self._cores_per_socket = cores_per_socket
        self._cpu_binding = cpu_binding
        self._cpu_binding_hint = cpu_binding_hint
        self._cpu_frequency = cpu_frequency
        self._cpus_per_gpu = cpus_per_gpu
        self._cpus_per_task = cpus_per_task
        self._current_working_directory = current_working_directory
        self._deadline = deadline
        self._delay_boot = delay_boot
        self._dependency = dependency
        self._distribution = distribution
        self._environment = environment
        self._exclusive = exclusive
        self._get_user_environment = get_user_environment
        self._gres = gres
        self._gres_flags = gres_flags
        self._gpu_binding = gpu_binding
        self._gpu_frequency = gpu_frequency
        self._gpus = gpus
        self._gpus_per_node = gpus_per_node
        self._gpus_per_socket = gpus_per_socket
        self._gpus_per_task = gpus_per_task
        self._hold = hold
        self._kill_on_invalid_dependency = kill_on_invalid_dependency
        self._licenses = licenses
        self._mail_type = mail_type
        self._mail_user = mail_user
        self._mcs_label = mcs_label
        self._memory_binding = memory_binding
        self._memory_per_cpu = memory_per_cpu
        self._memory_per_gpu = memory_per_gpu
        self._memory_per_node = memory_per_node
        self._minimum_cpus_per_node = minimum_cpus_per_node
        self._minimum_nodes = minimum_nodes
        self._name = name
        self._nice = nice
        self._no_kill = no_kill
        self._nodes = nodes
        self._open_mode = open_mode
        self._oversubscribe = oversubscribe
        self._partition = partition
        self._prefer = prefer
        self._priority = priority
        self._qos = qos
        self._requeue = requeue
        self._reservation = reservation
        self._signal = signal
        self._sockets_per_node = sockets_per_node
        self._spread_job = spread_job
        self._standard_error = standard_error
        self._standard_input = standard_input
        self._standard_output = standard_output
        self._tasks = tasks
        self._tasks_per_core = tasks_per_core
        self._tasks_per_node = tasks_per_node
        self._tasks_per_socket = tasks_per_socket
        self._thread_specification = thread_specification
        self._threads_per_core = threads_per_core
        self._time_limit = time_limit
        self._time_minimum = time_minimum
        self._wait_all_nodes = wait_all_nodes
        self._wckey = wckey

    @classmethod
    def from_dict(cls, dikt) -> 'V0038JobProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The v0.0.38_job_properties of this V0038JobProperties.  # noqa: E501
        :rtype: V0038JobProperties
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self) -> str:
        """Gets the account of this V0038JobProperties.

        Charge resources used by this job to specified account.  # noqa: E501

        :return: The account of this V0038JobProperties.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account: str):
        """Sets the account of this V0038JobProperties.

        Charge resources used by this job to specified account.  # noqa: E501

        :param account: The account of this V0038JobProperties.
        :type account: str
        """

        self._account = account

    @property
    def account_gather_frequency(self) -> str:
        """Gets the account_gather_frequency of this V0038JobProperties.

        Define the job accounting and profiling sampling intervals.  # noqa: E501

        :return: The account_gather_frequency of this V0038JobProperties.
        :rtype: str
        """
        return self._account_gather_frequency

    @account_gather_frequency.setter
    def account_gather_frequency(self, account_gather_frequency: str):
        """Sets the account_gather_frequency of this V0038JobProperties.

        Define the job accounting and profiling sampling intervals.  # noqa: E501

        :param account_gather_frequency: The account_gather_frequency of this V0038JobProperties.
        :type account_gather_frequency: str
        """

        self._account_gather_frequency = account_gather_frequency

    @property
    def argv(self) -> List[str]:
        """Gets the argv of this V0038JobProperties.

        Arguments to the script.  # noqa: E501

        :return: The argv of this V0038JobProperties.
        :rtype: List[str]
        """
        return self._argv

    @argv.setter
    def argv(self, argv: List[str]):
        """Sets the argv of this V0038JobProperties.

        Arguments to the script.  # noqa: E501

        :param argv: The argv of this V0038JobProperties.
        :type argv: List[str]
        """

        self._argv = argv

    @property
    def array(self) -> str:
        """Gets the array of this V0038JobProperties.

        Submit a job array, multiple jobs to be executed with identical parameters. The indexes specification identifies what array index values should be used.  # noqa: E501

        :return: The array of this V0038JobProperties.
        :rtype: str
        """
        return self._array

    @array.setter
    def array(self, array: str):
        """Sets the array of this V0038JobProperties.

        Submit a job array, multiple jobs to be executed with identical parameters. The indexes specification identifies what array index values should be used.  # noqa: E501

        :param array: The array of this V0038JobProperties.
        :type array: str
        """

        self._array = array

    @property
    def batch_features(self) -> str:
        """Gets the batch_features of this V0038JobProperties.

        features required for batch script's node  # noqa: E501

        :return: The batch_features of this V0038JobProperties.
        :rtype: str
        """
        return self._batch_features

    @batch_features.setter
    def batch_features(self, batch_features: str):
        """Sets the batch_features of this V0038JobProperties.

        features required for batch script's node  # noqa: E501

        :param batch_features: The batch_features of this V0038JobProperties.
        :type batch_features: str
        """

        self._batch_features = batch_features

    @property
    def begin_time(self) -> int:
        """Gets the begin_time of this V0038JobProperties.

        Submit the batch script to the Slurm controller immediately, like normal, but tell the controller to defer the allocation of the job until the specified time.  # noqa: E501

        :return: The begin_time of this V0038JobProperties.
        :rtype: int
        """
        return self._begin_time

    @begin_time.setter
    def begin_time(self, begin_time: int):
        """Sets the begin_time of this V0038JobProperties.

        Submit the batch script to the Slurm controller immediately, like normal, but tell the controller to defer the allocation of the job until the specified time.  # noqa: E501

        :param begin_time: The begin_time of this V0038JobProperties.
        :type begin_time: int
        """

        self._begin_time = begin_time

    @property
    def burst_buffer(self) -> str:
        """Gets the burst_buffer of this V0038JobProperties.

        Burst buffer specification.  # noqa: E501

        :return: The burst_buffer of this V0038JobProperties.
        :rtype: str
        """
        return self._burst_buffer

    @burst_buffer.setter
    def burst_buffer(self, burst_buffer: str):
        """Sets the burst_buffer of this V0038JobProperties.

        Burst buffer specification.  # noqa: E501

        :param burst_buffer: The burst_buffer of this V0038JobProperties.
        :type burst_buffer: str
        """

        self._burst_buffer = burst_buffer

    @property
    def cluster_constraint(self) -> str:
        """Gets the cluster_constraint of this V0038JobProperties.

        Specifies features that a federated cluster must have to have a sibling job submitted to it.  # noqa: E501

        :return: The cluster_constraint of this V0038JobProperties.
        :rtype: str
        """
        return self._cluster_constraint

    @cluster_constraint.setter
    def cluster_constraint(self, cluster_constraint: str):
        """Sets the cluster_constraint of this V0038JobProperties.

        Specifies features that a federated cluster must have to have a sibling job submitted to it.  # noqa: E501

        :param cluster_constraint: The cluster_constraint of this V0038JobProperties.
        :type cluster_constraint: str
        """

        self._cluster_constraint = cluster_constraint

    @property
    def comment(self) -> str:
        """Gets the comment of this V0038JobProperties.

        An arbitrary comment.  # noqa: E501

        :return: The comment of this V0038JobProperties.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment: str):
        """Sets the comment of this V0038JobProperties.

        An arbitrary comment.  # noqa: E501

        :param comment: The comment of this V0038JobProperties.
        :type comment: str
        """

        self._comment = comment

    @property
    def constraints(self) -> str:
        """Gets the constraints of this V0038JobProperties.

        node features required by job.  # noqa: E501

        :return: The constraints of this V0038JobProperties.
        :rtype: str
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints: str):
        """Sets the constraints of this V0038JobProperties.

        node features required by job.  # noqa: E501

        :param constraints: The constraints of this V0038JobProperties.
        :type constraints: str
        """

        self._constraints = constraints

    @property
    def container(self) -> str:
        """Gets the container of this V0038JobProperties.

        absolute path to OCI container bundle  # noqa: E501

        :return: The container of this V0038JobProperties.
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container: str):
        """Sets the container of this V0038JobProperties.

        absolute path to OCI container bundle  # noqa: E501

        :param container: The container of this V0038JobProperties.
        :type container: str
        """

        self._container = container

    @property
    def core_specification(self) -> int:
        """Gets the core_specification of this V0038JobProperties.

        Count of specialized threads per node reserved by the job for system operations and not used by the application.  # noqa: E501

        :return: The core_specification of this V0038JobProperties.
        :rtype: int
        """
        return self._core_specification

    @core_specification.setter
    def core_specification(self, core_specification: int):
        """Sets the core_specification of this V0038JobProperties.

        Count of specialized threads per node reserved by the job for system operations and not used by the application.  # noqa: E501

        :param core_specification: The core_specification of this V0038JobProperties.
        :type core_specification: int
        """

        self._core_specification = core_specification

    @property
    def cores_per_socket(self) -> int:
        """Gets the cores_per_socket of this V0038JobProperties.

        Restrict node selection to nodes with at least the specified number of cores per socket.  # noqa: E501

        :return: The cores_per_socket of this V0038JobProperties.
        :rtype: int
        """
        return self._cores_per_socket

    @cores_per_socket.setter
    def cores_per_socket(self, cores_per_socket: int):
        """Sets the cores_per_socket of this V0038JobProperties.

        Restrict node selection to nodes with at least the specified number of cores per socket.  # noqa: E501

        :param cores_per_socket: The cores_per_socket of this V0038JobProperties.
        :type cores_per_socket: int
        """

        self._cores_per_socket = cores_per_socket

    @property
    def cpu_binding(self) -> str:
        """Gets the cpu_binding of this V0038JobProperties.

        Cpu binding  # noqa: E501

        :return: The cpu_binding of this V0038JobProperties.
        :rtype: str
        """
        return self._cpu_binding

    @cpu_binding.setter
    def cpu_binding(self, cpu_binding: str):
        """Sets the cpu_binding of this V0038JobProperties.

        Cpu binding  # noqa: E501

        :param cpu_binding: The cpu_binding of this V0038JobProperties.
        :type cpu_binding: str
        """

        self._cpu_binding = cpu_binding

    @property
    def cpu_binding_hint(self) -> str:
        """Gets the cpu_binding_hint of this V0038JobProperties.

        Cpu binding hint  # noqa: E501

        :return: The cpu_binding_hint of this V0038JobProperties.
        :rtype: str
        """
        return self._cpu_binding_hint

    @cpu_binding_hint.setter
    def cpu_binding_hint(self, cpu_binding_hint: str):
        """Sets the cpu_binding_hint of this V0038JobProperties.

        Cpu binding hint  # noqa: E501

        :param cpu_binding_hint: The cpu_binding_hint of this V0038JobProperties.
        :type cpu_binding_hint: str
        """

        self._cpu_binding_hint = cpu_binding_hint

    @property
    def cpu_frequency(self) -> str:
        """Gets the cpu_frequency of this V0038JobProperties.

        Request that job steps initiated by srun commands inside this sbatch script be run at some requested frequency if possible, on the CPUs selected for the step on the compute node(s).  # noqa: E501

        :return: The cpu_frequency of this V0038JobProperties.
        :rtype: str
        """
        return self._cpu_frequency

    @cpu_frequency.setter
    def cpu_frequency(self, cpu_frequency: str):
        """Sets the cpu_frequency of this V0038JobProperties.

        Request that job steps initiated by srun commands inside this sbatch script be run at some requested frequency if possible, on the CPUs selected for the step on the compute node(s).  # noqa: E501

        :param cpu_frequency: The cpu_frequency of this V0038JobProperties.
        :type cpu_frequency: str
        """

        self._cpu_frequency = cpu_frequency

    @property
    def cpus_per_gpu(self) -> str:
        """Gets the cpus_per_gpu of this V0038JobProperties.

        Number of CPUs requested per allocated GPU.  # noqa: E501

        :return: The cpus_per_gpu of this V0038JobProperties.
        :rtype: str
        """
        return self._cpus_per_gpu

    @cpus_per_gpu.setter
    def cpus_per_gpu(self, cpus_per_gpu: str):
        """Sets the cpus_per_gpu of this V0038JobProperties.

        Number of CPUs requested per allocated GPU.  # noqa: E501

        :param cpus_per_gpu: The cpus_per_gpu of this V0038JobProperties.
        :type cpus_per_gpu: str
        """

        self._cpus_per_gpu = cpus_per_gpu

    @property
    def cpus_per_task(self) -> int:
        """Gets the cpus_per_task of this V0038JobProperties.

        Advise the Slurm controller that ensuing job steps will require ncpus number of processors per task.  # noqa: E501

        :return: The cpus_per_task of this V0038JobProperties.
        :rtype: int
        """
        return self._cpus_per_task

    @cpus_per_task.setter
    def cpus_per_task(self, cpus_per_task: int):
        """Sets the cpus_per_task of this V0038JobProperties.

        Advise the Slurm controller that ensuing job steps will require ncpus number of processors per task.  # noqa: E501

        :param cpus_per_task: The cpus_per_task of this V0038JobProperties.
        :type cpus_per_task: int
        """

        self._cpus_per_task = cpus_per_task

    @property
    def current_working_directory(self) -> str:
        """Gets the current_working_directory of this V0038JobProperties.

        Instruct Slurm to connect the batch script's standard output directly to the file name.  # noqa: E501

        :return: The current_working_directory of this V0038JobProperties.
        :rtype: str
        """
        return self._current_working_directory

    @current_working_directory.setter
    def current_working_directory(self, current_working_directory: str):
        """Sets the current_working_directory of this V0038JobProperties.

        Instruct Slurm to connect the batch script's standard output directly to the file name.  # noqa: E501

        :param current_working_directory: The current_working_directory of this V0038JobProperties.
        :type current_working_directory: str
        """

        self._current_working_directory = current_working_directory

    @property
    def deadline(self) -> str:
        """Gets the deadline of this V0038JobProperties.

        Remove the job if no ending is possible before this deadline (start > (deadline - time[-min])).  # noqa: E501

        :return: The deadline of this V0038JobProperties.
        :rtype: str
        """
        return self._deadline

    @deadline.setter
    def deadline(self, deadline: str):
        """Sets the deadline of this V0038JobProperties.

        Remove the job if no ending is possible before this deadline (start > (deadline - time[-min])).  # noqa: E501

        :param deadline: The deadline of this V0038JobProperties.
        :type deadline: str
        """

        self._deadline = deadline

    @property
    def delay_boot(self) -> int:
        """Gets the delay_boot of this V0038JobProperties.

        Do not reboot nodes in order to satisfied this job's feature specification if the job has been eligible to run for less than this time period.  # noqa: E501

        :return: The delay_boot of this V0038JobProperties.
        :rtype: int
        """
        return self._delay_boot

    @delay_boot.setter
    def delay_boot(self, delay_boot: int):
        """Sets the delay_boot of this V0038JobProperties.

        Do not reboot nodes in order to satisfied this job's feature specification if the job has been eligible to run for less than this time period.  # noqa: E501

        :param delay_boot: The delay_boot of this V0038JobProperties.
        :type delay_boot: int
        """

        self._delay_boot = delay_boot

    @property
    def dependency(self) -> str:
        """Gets the dependency of this V0038JobProperties.

        Defer the start of this job until the specified dependencies have been satisfied completed.  # noqa: E501

        :return: The dependency of this V0038JobProperties.
        :rtype: str
        """
        return self._dependency

    @dependency.setter
    def dependency(self, dependency: str):
        """Sets the dependency of this V0038JobProperties.

        Defer the start of this job until the specified dependencies have been satisfied completed.  # noqa: E501

        :param dependency: The dependency of this V0038JobProperties.
        :type dependency: str
        """

        self._dependency = dependency

    @property
    def distribution(self) -> str:
        """Gets the distribution of this V0038JobProperties.

        Specify alternate distribution methods for remote processes.  # noqa: E501

        :return: The distribution of this V0038JobProperties.
        :rtype: str
        """
        return self._distribution

    @distribution.setter
    def distribution(self, distribution: str):
        """Sets the distribution of this V0038JobProperties.

        Specify alternate distribution methods for remote processes.  # noqa: E501

        :param distribution: The distribution of this V0038JobProperties.
        :type distribution: str
        """

        self._distribution = distribution

    @property
    def environment(self) -> object:
        """Gets the environment of this V0038JobProperties.

        Dictionary of environment entries.  # noqa: E501

        :return: The environment of this V0038JobProperties.
        :rtype: object
        """
        return self._environment

    @environment.setter
    def environment(self, environment: object):
        """Sets the environment of this V0038JobProperties.

        Dictionary of environment entries.  # noqa: E501

        :param environment: The environment of this V0038JobProperties.
        :type environment: object
        """
        if environment is None:
            raise ValueError("Invalid value for `environment`, must not be `None`")  # noqa: E501

        self._environment = environment

    @property
    def exclusive(self) -> str:
        """Gets the exclusive of this V0038JobProperties.

        The job allocation can share nodes just other users with the \"user\" option or with the \"mcs\" option).  # noqa: E501

        :return: The exclusive of this V0038JobProperties.
        :rtype: str
        """
        return self._exclusive

    @exclusive.setter
    def exclusive(self, exclusive: str):
        """Sets the exclusive of this V0038JobProperties.

        The job allocation can share nodes just other users with the \"user\" option or with the \"mcs\" option).  # noqa: E501

        :param exclusive: The exclusive of this V0038JobProperties.
        :type exclusive: str
        """
        allowed_values = ["user", "mcs", "true", "false"]  # noqa: E501
        if exclusive not in allowed_values:
            raise ValueError(
                "Invalid value for `exclusive` ({0}), must be one of {1}"
                .format(exclusive, allowed_values)
            )

        self._exclusive = exclusive

    @property
    def get_user_environment(self) -> bool:
        """Gets the get_user_environment of this V0038JobProperties.

        Load new login environment for user on job node.  # noqa: E501

        :return: The get_user_environment of this V0038JobProperties.
        :rtype: bool
        """
        return self._get_user_environment

    @get_user_environment.setter
    def get_user_environment(self, get_user_environment: bool):
        """Sets the get_user_environment of this V0038JobProperties.

        Load new login environment for user on job node.  # noqa: E501

        :param get_user_environment: The get_user_environment of this V0038JobProperties.
        :type get_user_environment: bool
        """

        self._get_user_environment = get_user_environment

    @property
    def gres(self) -> str:
        """Gets the gres of this V0038JobProperties.

        Specifies a comma delimited list of generic consumable resources.  # noqa: E501

        :return: The gres of this V0038JobProperties.
        :rtype: str
        """
        return self._gres

    @gres.setter
    def gres(self, gres: str):
        """Sets the gres of this V0038JobProperties.

        Specifies a comma delimited list of generic consumable resources.  # noqa: E501

        :param gres: The gres of this V0038JobProperties.
        :type gres: str
        """

        self._gres = gres

    @property
    def gres_flags(self) -> str:
        """Gets the gres_flags of this V0038JobProperties.

        Specify generic resource task binding options.  # noqa: E501

        :return: The gres_flags of this V0038JobProperties.
        :rtype: str
        """
        return self._gres_flags

    @gres_flags.setter
    def gres_flags(self, gres_flags: str):
        """Sets the gres_flags of this V0038JobProperties.

        Specify generic resource task binding options.  # noqa: E501

        :param gres_flags: The gres_flags of this V0038JobProperties.
        :type gres_flags: str
        """
        allowed_values = ["disable-binding", "enforce-binding"]  # noqa: E501
        if gres_flags not in allowed_values:
            raise ValueError(
                "Invalid value for `gres_flags` ({0}), must be one of {1}"
                .format(gres_flags, allowed_values)
            )

        self._gres_flags = gres_flags

    @property
    def gpu_binding(self) -> str:
        """Gets the gpu_binding of this V0038JobProperties.

        Requested binding of tasks to GPU.  # noqa: E501

        :return: The gpu_binding of this V0038JobProperties.
        :rtype: str
        """
        return self._gpu_binding

    @gpu_binding.setter
    def gpu_binding(self, gpu_binding: str):
        """Sets the gpu_binding of this V0038JobProperties.

        Requested binding of tasks to GPU.  # noqa: E501

        :param gpu_binding: The gpu_binding of this V0038JobProperties.
        :type gpu_binding: str
        """

        self._gpu_binding = gpu_binding

    @property
    def gpu_frequency(self) -> str:
        """Gets the gpu_frequency of this V0038JobProperties.

        Requested GPU frequency.  # noqa: E501

        :return: The gpu_frequency of this V0038JobProperties.
        :rtype: str
        """
        return self._gpu_frequency

    @gpu_frequency.setter
    def gpu_frequency(self, gpu_frequency: str):
        """Sets the gpu_frequency of this V0038JobProperties.

        Requested GPU frequency.  # noqa: E501

        :param gpu_frequency: The gpu_frequency of this V0038JobProperties.
        :type gpu_frequency: str
        """

        self._gpu_frequency = gpu_frequency

    @property
    def gpus(self) -> str:
        """Gets the gpus of this V0038JobProperties.

        GPUs per job.  # noqa: E501

        :return: The gpus of this V0038JobProperties.
        :rtype: str
        """
        return self._gpus

    @gpus.setter
    def gpus(self, gpus: str):
        """Sets the gpus of this V0038JobProperties.

        GPUs per job.  # noqa: E501

        :param gpus: The gpus of this V0038JobProperties.
        :type gpus: str
        """

        self._gpus = gpus

    @property
    def gpus_per_node(self) -> str:
        """Gets the gpus_per_node of this V0038JobProperties.

        GPUs per node.  # noqa: E501

        :return: The gpus_per_node of this V0038JobProperties.
        :rtype: str
        """
        return self._gpus_per_node

    @gpus_per_node.setter
    def gpus_per_node(self, gpus_per_node: str):
        """Sets the gpus_per_node of this V0038JobProperties.

        GPUs per node.  # noqa: E501

        :param gpus_per_node: The gpus_per_node of this V0038JobProperties.
        :type gpus_per_node: str
        """

        self._gpus_per_node = gpus_per_node

    @property
    def gpus_per_socket(self) -> str:
        """Gets the gpus_per_socket of this V0038JobProperties.

        GPUs per socket.  # noqa: E501

        :return: The gpus_per_socket of this V0038JobProperties.
        :rtype: str
        """
        return self._gpus_per_socket

    @gpus_per_socket.setter
    def gpus_per_socket(self, gpus_per_socket: str):
        """Sets the gpus_per_socket of this V0038JobProperties.

        GPUs per socket.  # noqa: E501

        :param gpus_per_socket: The gpus_per_socket of this V0038JobProperties.
        :type gpus_per_socket: str
        """

        self._gpus_per_socket = gpus_per_socket

    @property
    def gpus_per_task(self) -> str:
        """Gets the gpus_per_task of this V0038JobProperties.

        GPUs per task.  # noqa: E501

        :return: The gpus_per_task of this V0038JobProperties.
        :rtype: str
        """
        return self._gpus_per_task

    @gpus_per_task.setter
    def gpus_per_task(self, gpus_per_task: str):
        """Sets the gpus_per_task of this V0038JobProperties.

        GPUs per task.  # noqa: E501

        :param gpus_per_task: The gpus_per_task of this V0038JobProperties.
        :type gpus_per_task: str
        """

        self._gpus_per_task = gpus_per_task

    @property
    def hold(self) -> bool:
        """Gets the hold of this V0038JobProperties.

        Specify the job is to be submitted in a held state (priority of zero).  # noqa: E501

        :return: The hold of this V0038JobProperties.
        :rtype: bool
        """
        return self._hold

    @hold.setter
    def hold(self, hold: bool):
        """Sets the hold of this V0038JobProperties.

        Specify the job is to be submitted in a held state (priority of zero).  # noqa: E501

        :param hold: The hold of this V0038JobProperties.
        :type hold: bool
        """

        self._hold = hold

    @property
    def kill_on_invalid_dependency(self) -> bool:
        """Gets the kill_on_invalid_dependency of this V0038JobProperties.

        If a job has an invalid dependency, then Slurm is to terminate it.  # noqa: E501

        :return: The kill_on_invalid_dependency of this V0038JobProperties.
        :rtype: bool
        """
        return self._kill_on_invalid_dependency

    @kill_on_invalid_dependency.setter
    def kill_on_invalid_dependency(self, kill_on_invalid_dependency: bool):
        """Sets the kill_on_invalid_dependency of this V0038JobProperties.

        If a job has an invalid dependency, then Slurm is to terminate it.  # noqa: E501

        :param kill_on_invalid_dependency: The kill_on_invalid_dependency of this V0038JobProperties.
        :type kill_on_invalid_dependency: bool
        """

        self._kill_on_invalid_dependency = kill_on_invalid_dependency

    @property
    def licenses(self) -> str:
        """Gets the licenses of this V0038JobProperties.

        Specification of licenses (or other resources available on all nodes of the cluster) which must be allocated to this job.  # noqa: E501

        :return: The licenses of this V0038JobProperties.
        :rtype: str
        """
        return self._licenses

    @licenses.setter
    def licenses(self, licenses: str):
        """Sets the licenses of this V0038JobProperties.

        Specification of licenses (or other resources available on all nodes of the cluster) which must be allocated to this job.  # noqa: E501

        :param licenses: The licenses of this V0038JobProperties.
        :type licenses: str
        """

        self._licenses = licenses

    @property
    def mail_type(self) -> str:
        """Gets the mail_type of this V0038JobProperties.

        Notify user by email when certain event types occur.  # noqa: E501

        :return: The mail_type of this V0038JobProperties.
        :rtype: str
        """
        return self._mail_type

    @mail_type.setter
    def mail_type(self, mail_type: str):
        """Sets the mail_type of this V0038JobProperties.

        Notify user by email when certain event types occur.  # noqa: E501

        :param mail_type: The mail_type of this V0038JobProperties.
        :type mail_type: str
        """

        self._mail_type = mail_type

    @property
    def mail_user(self) -> str:
        """Gets the mail_user of this V0038JobProperties.

        User to receive email notification of state changes as defined by mail_type.  # noqa: E501

        :return: The mail_user of this V0038JobProperties.
        :rtype: str
        """
        return self._mail_user

    @mail_user.setter
    def mail_user(self, mail_user: str):
        """Sets the mail_user of this V0038JobProperties.

        User to receive email notification of state changes as defined by mail_type.  # noqa: E501

        :param mail_user: The mail_user of this V0038JobProperties.
        :type mail_user: str
        """

        self._mail_user = mail_user

    @property
    def mcs_label(self) -> str:
        """Gets the mcs_label of this V0038JobProperties.

        This parameter is a group among the groups of the user.  # noqa: E501

        :return: The mcs_label of this V0038JobProperties.
        :rtype: str
        """
        return self._mcs_label

    @mcs_label.setter
    def mcs_label(self, mcs_label: str):
        """Sets the mcs_label of this V0038JobProperties.

        This parameter is a group among the groups of the user.  # noqa: E501

        :param mcs_label: The mcs_label of this V0038JobProperties.
        :type mcs_label: str
        """

        self._mcs_label = mcs_label

    @property
    def memory_binding(self) -> str:
        """Gets the memory_binding of this V0038JobProperties.

        Bind tasks to memory.  # noqa: E501

        :return: The memory_binding of this V0038JobProperties.
        :rtype: str
        """
        return self._memory_binding

    @memory_binding.setter
    def memory_binding(self, memory_binding: str):
        """Sets the memory_binding of this V0038JobProperties.

        Bind tasks to memory.  # noqa: E501

        :param memory_binding: The memory_binding of this V0038JobProperties.
        :type memory_binding: str
        """

        self._memory_binding = memory_binding

    @property
    def memory_per_cpu(self) -> int:
        """Gets the memory_per_cpu of this V0038JobProperties.

        Minimum real memory per cpu (MB).  # noqa: E501

        :return: The memory_per_cpu of this V0038JobProperties.
        :rtype: int
        """
        return self._memory_per_cpu

    @memory_per_cpu.setter
    def memory_per_cpu(self, memory_per_cpu: int):
        """Sets the memory_per_cpu of this V0038JobProperties.

        Minimum real memory per cpu (MB).  # noqa: E501

        :param memory_per_cpu: The memory_per_cpu of this V0038JobProperties.
        :type memory_per_cpu: int
        """

        self._memory_per_cpu = memory_per_cpu

    @property
    def memory_per_gpu(self) -> int:
        """Gets the memory_per_gpu of this V0038JobProperties.

        Minimum memory required per allocated GPU.  # noqa: E501

        :return: The memory_per_gpu of this V0038JobProperties.
        :rtype: int
        """
        return self._memory_per_gpu

    @memory_per_gpu.setter
    def memory_per_gpu(self, memory_per_gpu: int):
        """Sets the memory_per_gpu of this V0038JobProperties.

        Minimum memory required per allocated GPU.  # noqa: E501

        :param memory_per_gpu: The memory_per_gpu of this V0038JobProperties.
        :type memory_per_gpu: int
        """

        self._memory_per_gpu = memory_per_gpu

    @property
    def memory_per_node(self) -> int:
        """Gets the memory_per_node of this V0038JobProperties.

        Minimum real memory per node (MB).  # noqa: E501

        :return: The memory_per_node of this V0038JobProperties.
        :rtype: int
        """
        return self._memory_per_node

    @memory_per_node.setter
    def memory_per_node(self, memory_per_node: int):
        """Sets the memory_per_node of this V0038JobProperties.

        Minimum real memory per node (MB).  # noqa: E501

        :param memory_per_node: The memory_per_node of this V0038JobProperties.
        :type memory_per_node: int
        """

        self._memory_per_node = memory_per_node

    @property
    def minimum_cpus_per_node(self) -> int:
        """Gets the minimum_cpus_per_node of this V0038JobProperties.

        Minimum number of CPUs per node.  # noqa: E501

        :return: The minimum_cpus_per_node of this V0038JobProperties.
        :rtype: int
        """
        return self._minimum_cpus_per_node

    @minimum_cpus_per_node.setter
    def minimum_cpus_per_node(self, minimum_cpus_per_node: int):
        """Sets the minimum_cpus_per_node of this V0038JobProperties.

        Minimum number of CPUs per node.  # noqa: E501

        :param minimum_cpus_per_node: The minimum_cpus_per_node of this V0038JobProperties.
        :type minimum_cpus_per_node: int
        """

        self._minimum_cpus_per_node = minimum_cpus_per_node

    @property
    def minimum_nodes(self) -> bool:
        """Gets the minimum_nodes of this V0038JobProperties.

        If a range of node counts is given, prefer the smaller count.  # noqa: E501

        :return: The minimum_nodes of this V0038JobProperties.
        :rtype: bool
        """
        return self._minimum_nodes

    @minimum_nodes.setter
    def minimum_nodes(self, minimum_nodes: bool):
        """Sets the minimum_nodes of this V0038JobProperties.

        If a range of node counts is given, prefer the smaller count.  # noqa: E501

        :param minimum_nodes: The minimum_nodes of this V0038JobProperties.
        :type minimum_nodes: bool
        """

        self._minimum_nodes = minimum_nodes

    @property
    def name(self) -> str:
        """Gets the name of this V0038JobProperties.

        Specify a name for the job allocation.  # noqa: E501

        :return: The name of this V0038JobProperties.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this V0038JobProperties.

        Specify a name for the job allocation.  # noqa: E501

        :param name: The name of this V0038JobProperties.
        :type name: str
        """

        self._name = name

    @property
    def nice(self) -> int:
        """Gets the nice of this V0038JobProperties.

        Run the job with an adjusted scheduling priority within Slurm.  # noqa: E501

        :return: The nice of this V0038JobProperties.
        :rtype: int
        """
        return self._nice

    @nice.setter
    def nice(self, nice: int):
        """Sets the nice of this V0038JobProperties.

        Run the job with an adjusted scheduling priority within Slurm.  # noqa: E501

        :param nice: The nice of this V0038JobProperties.
        :type nice: int
        """

        self._nice = nice

    @property
    def no_kill(self) -> bool:
        """Gets the no_kill of this V0038JobProperties.

        Do not automatically terminate a job if one of the nodes it has been allocated fails.  # noqa: E501

        :return: The no_kill of this V0038JobProperties.
        :rtype: bool
        """
        return self._no_kill

    @no_kill.setter
    def no_kill(self, no_kill: bool):
        """Sets the no_kill of this V0038JobProperties.

        Do not automatically terminate a job if one of the nodes it has been allocated fails.  # noqa: E501

        :param no_kill: The no_kill of this V0038JobProperties.
        :type no_kill: bool
        """

        self._no_kill = no_kill

    @property
    def nodes(self) -> List[int]:
        """Gets the nodes of this V0038JobProperties.

        Request that a minimum of minnodes nodes and a maximum node count.  # noqa: E501

        :return: The nodes of this V0038JobProperties.
        :rtype: List[int]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes: List[int]):
        """Sets the nodes of this V0038JobProperties.

        Request that a minimum of minnodes nodes and a maximum node count.  # noqa: E501

        :param nodes: The nodes of this V0038JobProperties.
        :type nodes: List[int]
        """
        if nodes is not None and len(nodes) > 2:
            raise ValueError("Invalid value for `nodes`, number of items must be less than or equal to `2`")  # noqa: E501
        if nodes is not None and len(nodes) < 1:
            raise ValueError("Invalid value for `nodes`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._nodes = nodes

    @property
    def open_mode(self) -> str:
        """Gets the open_mode of this V0038JobProperties.

        Open the output and error files using append or truncate mode as specified.  # noqa: E501

        :return: The open_mode of this V0038JobProperties.
        :rtype: str
        """
        return self._open_mode

    @open_mode.setter
    def open_mode(self, open_mode: str):
        """Sets the open_mode of this V0038JobProperties.

        Open the output and error files using append or truncate mode as specified.  # noqa: E501

        :param open_mode: The open_mode of this V0038JobProperties.
        :type open_mode: str
        """
        allowed_values = ["append", "truncate"]  # noqa: E501
        if open_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `open_mode` ({0}), must be one of {1}"
                .format(open_mode, allowed_values)
            )

        self._open_mode = open_mode

    @property
    def oversubscribe(self) -> bool:
        """Gets the oversubscribe of this V0038JobProperties.

        The job allocation can over-subscribe resources with other running jobs.  # noqa: E501

        :return: The oversubscribe of this V0038JobProperties.
        :rtype: bool
        """
        return self._oversubscribe

    @oversubscribe.setter
    def oversubscribe(self, oversubscribe: bool):
        """Sets the oversubscribe of this V0038JobProperties.

        The job allocation can over-subscribe resources with other running jobs.  # noqa: E501

        :param oversubscribe: The oversubscribe of this V0038JobProperties.
        :type oversubscribe: bool
        """

        self._oversubscribe = oversubscribe

    @property
    def partition(self) -> str:
        """Gets the partition of this V0038JobProperties.

        Request a specific partition for the resource allocation.  # noqa: E501

        :return: The partition of this V0038JobProperties.
        :rtype: str
        """
        return self._partition

    @partition.setter
    def partition(self, partition: str):
        """Sets the partition of this V0038JobProperties.

        Request a specific partition for the resource allocation.  # noqa: E501

        :param partition: The partition of this V0038JobProperties.
        :type partition: str
        """

        self._partition = partition

    @property
    def prefer(self) -> str:
        """Gets the prefer of this V0038JobProperties.

        Comma delimited list of features for scheduler to prefer but not a strict requirement like a constraint. Value can be used for job submission but is only displayed for PENDING jobs.  # noqa: E501

        :return: The prefer of this V0038JobProperties.
        :rtype: str
        """
        return self._prefer

    @prefer.setter
    def prefer(self, prefer: str):
        """Sets the prefer of this V0038JobProperties.

        Comma delimited list of features for scheduler to prefer but not a strict requirement like a constraint. Value can be used for job submission but is only displayed for PENDING jobs.  # noqa: E501

        :param prefer: The prefer of this V0038JobProperties.
        :type prefer: str
        """

        self._prefer = prefer

    @property
    def priority(self) -> str:
        """Gets the priority of this V0038JobProperties.

        Request a specific job priority.  # noqa: E501

        :return: The priority of this V0038JobProperties.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority: str):
        """Sets the priority of this V0038JobProperties.

        Request a specific job priority.  # noqa: E501

        :param priority: The priority of this V0038JobProperties.
        :type priority: str
        """

        self._priority = priority

    @property
    def qos(self) -> str:
        """Gets the qos of this V0038JobProperties.

        Request a quality of service for the job.  # noqa: E501

        :return: The qos of this V0038JobProperties.
        :rtype: str
        """
        return self._qos

    @qos.setter
    def qos(self, qos: str):
        """Sets the qos of this V0038JobProperties.

        Request a quality of service for the job.  # noqa: E501

        :param qos: The qos of this V0038JobProperties.
        :type qos: str
        """

        self._qos = qos

    @property
    def requeue(self) -> bool:
        """Gets the requeue of this V0038JobProperties.

        Specifies that the batch job should eligible to being requeue.  # noqa: E501

        :return: The requeue of this V0038JobProperties.
        :rtype: bool
        """
        return self._requeue

    @requeue.setter
    def requeue(self, requeue: bool):
        """Sets the requeue of this V0038JobProperties.

        Specifies that the batch job should eligible to being requeue.  # noqa: E501

        :param requeue: The requeue of this V0038JobProperties.
        :type requeue: bool
        """

        self._requeue = requeue

    @property
    def reservation(self) -> str:
        """Gets the reservation of this V0038JobProperties.

        Allocate resources for the job from the named reservation.  # noqa: E501

        :return: The reservation of this V0038JobProperties.
        :rtype: str
        """
        return self._reservation

    @reservation.setter
    def reservation(self, reservation: str):
        """Sets the reservation of this V0038JobProperties.

        Allocate resources for the job from the named reservation.  # noqa: E501

        :param reservation: The reservation of this V0038JobProperties.
        :type reservation: str
        """

        self._reservation = reservation

    @property
    def signal(self) -> str:
        """Gets the signal of this V0038JobProperties.

        When a job is within sig_time seconds of its end time, send it the signal sig_num.  # noqa: E501

        :return: The signal of this V0038JobProperties.
        :rtype: str
        """
        return self._signal

    @signal.setter
    def signal(self, signal: str):
        """Sets the signal of this V0038JobProperties.

        When a job is within sig_time seconds of its end time, send it the signal sig_num.  # noqa: E501

        :param signal: The signal of this V0038JobProperties.
        :type signal: str
        """
        if signal is not None and not re.search(r'(B:|)sig_num(@sig_time|)', signal):  # noqa: E501
            raise ValueError(r"Invalid value for `signal`, must be a follow pattern or equal to `/(B:|)sig_num(@sig_time|)/`")  # noqa: E501

        self._signal = signal

    @property
    def sockets_per_node(self) -> int:
        """Gets the sockets_per_node of this V0038JobProperties.

        Restrict node selection to nodes with at least the specified number of sockets.  # noqa: E501

        :return: The sockets_per_node of this V0038JobProperties.
        :rtype: int
        """
        return self._sockets_per_node

    @sockets_per_node.setter
    def sockets_per_node(self, sockets_per_node: int):
        """Sets the sockets_per_node of this V0038JobProperties.

        Restrict node selection to nodes with at least the specified number of sockets.  # noqa: E501

        :param sockets_per_node: The sockets_per_node of this V0038JobProperties.
        :type sockets_per_node: int
        """

        self._sockets_per_node = sockets_per_node

    @property
    def spread_job(self) -> bool:
        """Gets the spread_job of this V0038JobProperties.

        Spread the job allocation over as many nodes as possible and attempt to evenly distribute tasks across the allocated nodes.  # noqa: E501

        :return: The spread_job of this V0038JobProperties.
        :rtype: bool
        """
        return self._spread_job

    @spread_job.setter
    def spread_job(self, spread_job: bool):
        """Sets the spread_job of this V0038JobProperties.

        Spread the job allocation over as many nodes as possible and attempt to evenly distribute tasks across the allocated nodes.  # noqa: E501

        :param spread_job: The spread_job of this V0038JobProperties.
        :type spread_job: bool
        """

        self._spread_job = spread_job

    @property
    def standard_error(self) -> str:
        """Gets the standard_error of this V0038JobProperties.

        Instruct Slurm to connect the batch script's standard error directly to the file name.  # noqa: E501

        :return: The standard_error of this V0038JobProperties.
        :rtype: str
        """
        return self._standard_error

    @standard_error.setter
    def standard_error(self, standard_error: str):
        """Sets the standard_error of this V0038JobProperties.

        Instruct Slurm to connect the batch script's standard error directly to the file name.  # noqa: E501

        :param standard_error: The standard_error of this V0038JobProperties.
        :type standard_error: str
        """

        self._standard_error = standard_error

    @property
    def standard_input(self) -> str:
        """Gets the standard_input of this V0038JobProperties.

        Instruct Slurm to connect the batch script's standard input directly to the file name specified.  # noqa: E501

        :return: The standard_input of this V0038JobProperties.
        :rtype: str
        """
        return self._standard_input

    @standard_input.setter
    def standard_input(self, standard_input: str):
        """Sets the standard_input of this V0038JobProperties.

        Instruct Slurm to connect the batch script's standard input directly to the file name specified.  # noqa: E501

        :param standard_input: The standard_input of this V0038JobProperties.
        :type standard_input: str
        """

        self._standard_input = standard_input

    @property
    def standard_output(self) -> str:
        """Gets the standard_output of this V0038JobProperties.

        Instruct Slurm to connect the batch script's standard output directly to the file name.  # noqa: E501

        :return: The standard_output of this V0038JobProperties.
        :rtype: str
        """
        return self._standard_output

    @standard_output.setter
    def standard_output(self, standard_output: str):
        """Sets the standard_output of this V0038JobProperties.

        Instruct Slurm to connect the batch script's standard output directly to the file name.  # noqa: E501

        :param standard_output: The standard_output of this V0038JobProperties.
        :type standard_output: str
        """

        self._standard_output = standard_output

    @property
    def tasks(self) -> int:
        """Gets the tasks of this V0038JobProperties.

        Advises the Slurm controller that job steps run within the allocation will launch a maximum of number tasks and to provide for sufficient resources.  # noqa: E501

        :return: The tasks of this V0038JobProperties.
        :rtype: int
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks: int):
        """Sets the tasks of this V0038JobProperties.

        Advises the Slurm controller that job steps run within the allocation will launch a maximum of number tasks and to provide for sufficient resources.  # noqa: E501

        :param tasks: The tasks of this V0038JobProperties.
        :type tasks: int
        """

        self._tasks = tasks

    @property
    def tasks_per_core(self) -> int:
        """Gets the tasks_per_core of this V0038JobProperties.

        Request the maximum ntasks be invoked on each core.  # noqa: E501

        :return: The tasks_per_core of this V0038JobProperties.
        :rtype: int
        """
        return self._tasks_per_core

    @tasks_per_core.setter
    def tasks_per_core(self, tasks_per_core: int):
        """Sets the tasks_per_core of this V0038JobProperties.

        Request the maximum ntasks be invoked on each core.  # noqa: E501

        :param tasks_per_core: The tasks_per_core of this V0038JobProperties.
        :type tasks_per_core: int
        """

        self._tasks_per_core = tasks_per_core

    @property
    def tasks_per_node(self) -> int:
        """Gets the tasks_per_node of this V0038JobProperties.

        Request the maximum ntasks be invoked on each node.  # noqa: E501

        :return: The tasks_per_node of this V0038JobProperties.
        :rtype: int
        """
        return self._tasks_per_node

    @tasks_per_node.setter
    def tasks_per_node(self, tasks_per_node: int):
        """Sets the tasks_per_node of this V0038JobProperties.

        Request the maximum ntasks be invoked on each node.  # noqa: E501

        :param tasks_per_node: The tasks_per_node of this V0038JobProperties.
        :type tasks_per_node: int
        """

        self._tasks_per_node = tasks_per_node

    @property
    def tasks_per_socket(self) -> int:
        """Gets the tasks_per_socket of this V0038JobProperties.

        Request the maximum ntasks be invoked on each socket.  # noqa: E501

        :return: The tasks_per_socket of this V0038JobProperties.
        :rtype: int
        """
        return self._tasks_per_socket

    @tasks_per_socket.setter
    def tasks_per_socket(self, tasks_per_socket: int):
        """Sets the tasks_per_socket of this V0038JobProperties.

        Request the maximum ntasks be invoked on each socket.  # noqa: E501

        :param tasks_per_socket: The tasks_per_socket of this V0038JobProperties.
        :type tasks_per_socket: int
        """

        self._tasks_per_socket = tasks_per_socket

    @property
    def thread_specification(self) -> int:
        """Gets the thread_specification of this V0038JobProperties.

        Count of specialized threads per node reserved by the job for system operations and not used by the application.  # noqa: E501

        :return: The thread_specification of this V0038JobProperties.
        :rtype: int
        """
        return self._thread_specification

    @thread_specification.setter
    def thread_specification(self, thread_specification: int):
        """Sets the thread_specification of this V0038JobProperties.

        Count of specialized threads per node reserved by the job for system operations and not used by the application.  # noqa: E501

        :param thread_specification: The thread_specification of this V0038JobProperties.
        :type thread_specification: int
        """

        self._thread_specification = thread_specification

    @property
    def threads_per_core(self) -> int:
        """Gets the threads_per_core of this V0038JobProperties.

        Restrict node selection to nodes with at least the specified number of threads per core.  # noqa: E501

        :return: The threads_per_core of this V0038JobProperties.
        :rtype: int
        """
        return self._threads_per_core

    @threads_per_core.setter
    def threads_per_core(self, threads_per_core: int):
        """Sets the threads_per_core of this V0038JobProperties.

        Restrict node selection to nodes with at least the specified number of threads per core.  # noqa: E501

        :param threads_per_core: The threads_per_core of this V0038JobProperties.
        :type threads_per_core: int
        """

        self._threads_per_core = threads_per_core

    @property
    def time_limit(self) -> int:
        """Gets the time_limit of this V0038JobProperties.

        Step time limit in minutes.  # noqa: E501

        :return: The time_limit of this V0038JobProperties.
        :rtype: int
        """
        return self._time_limit

    @time_limit.setter
    def time_limit(self, time_limit: int):
        """Sets the time_limit of this V0038JobProperties.

        Step time limit in minutes.  # noqa: E501

        :param time_limit: The time_limit of this V0038JobProperties.
        :type time_limit: int
        """

        self._time_limit = time_limit

    @property
    def time_minimum(self) -> int:
        """Gets the time_minimum of this V0038JobProperties.

        Minimum run time in minutes.  # noqa: E501

        :return: The time_minimum of this V0038JobProperties.
        :rtype: int
        """
        return self._time_minimum

    @time_minimum.setter
    def time_minimum(self, time_minimum: int):
        """Sets the time_minimum of this V0038JobProperties.

        Minimum run time in minutes.  # noqa: E501

        :param time_minimum: The time_minimum of this V0038JobProperties.
        :type time_minimum: int
        """

        self._time_minimum = time_minimum

    @property
    def wait_all_nodes(self) -> bool:
        """Gets the wait_all_nodes of this V0038JobProperties.

        Do not begin execution until all nodes are ready for use.  # noqa: E501

        :return: The wait_all_nodes of this V0038JobProperties.
        :rtype: bool
        """
        return self._wait_all_nodes

    @wait_all_nodes.setter
    def wait_all_nodes(self, wait_all_nodes: bool):
        """Sets the wait_all_nodes of this V0038JobProperties.

        Do not begin execution until all nodes are ready for use.  # noqa: E501

        :param wait_all_nodes: The wait_all_nodes of this V0038JobProperties.
        :type wait_all_nodes: bool
        """

        self._wait_all_nodes = wait_all_nodes

    @property
    def wckey(self) -> str:
        """Gets the wckey of this V0038JobProperties.

        Specify wckey to be used with job.  # noqa: E501

        :return: The wckey of this V0038JobProperties.
        :rtype: str
        """
        return self._wckey

    @wckey.setter
    def wckey(self, wckey: str):
        """Sets the wckey of this V0038JobProperties.

        Specify wckey to be used with job.  # noqa: E501

        :param wckey: The wckey of this V0038JobProperties.
        :type wckey: str
        """

        self._wckey = wckey
