from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class V0038Ping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hostname=None, ping=None, mode=None, status=None):  # noqa: E501
        """V0038Ping - a model defined in OpenAPI

        :param hostname: The hostname of this V0038Ping.  # noqa: E501
        :type hostname: str
        :param ping: The ping of this V0038Ping.  # noqa: E501
        :type ping: str
        :param mode: The mode of this V0038Ping.  # noqa: E501
        :type mode: str
        :param status: The status of this V0038Ping.  # noqa: E501
        :type status: int
        """
        self.openapi_types = {
            'hostname': str,
            'ping': str,
            'mode': str,
            'status': int
        }

        self.attribute_map = {
            'hostname': 'hostname',
            'ping': 'ping',
            'mode': 'mode',
            'status': 'status'
        }

        self._hostname = hostname
        self._ping = ping
        self._mode = mode
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'V0038Ping':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The v0.0.38_ping of this V0038Ping.  # noqa: E501
        :rtype: V0038Ping
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hostname(self) -> str:
        """Gets the hostname of this V0038Ping.

        slurm controller hostname  # noqa: E501

        :return: The hostname of this V0038Ping.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname: str):
        """Sets the hostname of this V0038Ping.

        slurm controller hostname  # noqa: E501

        :param hostname: The hostname of this V0038Ping.
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def ping(self) -> str:
        """Gets the ping of this V0038Ping.

        slurm controller host up  # noqa: E501

        :return: The ping of this V0038Ping.
        :rtype: str
        """
        return self._ping

    @ping.setter
    def ping(self, ping: str):
        """Sets the ping of this V0038Ping.

        slurm controller host up  # noqa: E501

        :param ping: The ping of this V0038Ping.
        :type ping: str
        """
        allowed_values = ["UP", "DOWN"]  # noqa: E501
        if ping not in allowed_values:
            raise ValueError(
                "Invalid value for `ping` ({0}), must be one of {1}"
                .format(ping, allowed_values)
            )

        self._ping = ping

    @property
    def mode(self) -> str:
        """Gets the mode of this V0038Ping.

        slurm controller mode  # noqa: E501

        :return: The mode of this V0038Ping.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode: str):
        """Sets the mode of this V0038Ping.

        slurm controller mode  # noqa: E501

        :param mode: The mode of this V0038Ping.
        :type mode: str
        """

        self._mode = mode

    @property
    def status(self) -> int:
        """Gets the status of this V0038Ping.

        slurm controller status  # noqa: E501

        :return: The status of this V0038Ping.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status: int):
        """Sets the status of this V0038Ping.

        slurm controller status  # noqa: E501

        :param status: The status of this V0038Ping.
        :type status: int
        """

        self._status = status
