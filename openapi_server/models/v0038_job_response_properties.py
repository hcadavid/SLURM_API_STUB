from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.v0038_job_resources import V0038JobResources
from openapi_server import util

from openapi_server.models.v0038_job_resources import V0038JobResources  # noqa: E501

class V0038JobResponseProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account=None, accrue_time=None, admin_comment=None, array_job_id=None, array_task_id=None, array_max_tasks=None, array_task_string=None, association_id=None, batch_features=None, batch_flag=None, batch_host=None, flags=None, burst_buffer=None, burst_buffer_state=None, cluster=None, cluster_features=None, command=None, comment=None, container=None, contiguous=None, core_spec=None, thread_spec=None, cores_per_socket=None, billable_tres=None, cpus_per_task=None, cpu_frequency_minimum=None, cpu_frequency_maximum=None, cpu_frequency_governor=None, cpus_per_tres=None, deadline=None, delay_boot=None, dependency=None, derived_exit_code=None, eligible_time=None, end_time=None, excluded_nodes=None, exit_code=None, features=None, federation_origin=None, federation_siblings_active=None, federation_siblings_viable=None, gres_detail=None, group_id=None, job_id=None, job_resources=None, job_state=None, last_sched_evaluation=None, licenses=None, max_cpus=None, max_nodes=None, mcs_label=None, memory_per_tres=None, name=None, nodes=None, nice=None, tasks_per_core=None, tasks_per_socket=None, tasks_per_board=None, cpus=None, node_count=None, tasks=None, het_job_id=None, het_job_id_set=None, het_job_offset=None, partition=None, memory_per_node=None, memory_per_cpu=None, minimum_cpus_per_node=None, minimum_tmp_disk_per_node=None, preempt_time=None, pre_sus_time=None, priority=None, profile=None, qos=None, reboot=None, required_nodes=None, requeue=None, resize_time=None, restart_cnt=None, resv_name=None, shared=None, show_flags=None, sockets_per_board=None, sockets_per_node=None, start_time=None, state_description=None, state_reason=None, standard_error=None, standard_input=None, standard_output=None, submit_time=None, suspend_time=None, system_comment=None, time_limit=None, time_minimum=None, threads_per_core=None, tres_bind=None, tres_freq=None, tres_per_job=None, tres_per_node=None, tres_per_socket=None, tres_per_task=None, tres_req_str=None, tres_alloc_str=None, user_id=None, user_name=None, wckey=None, current_working_directory=None):  # noqa: E501
        """V0038JobResponseProperties - a model defined in OpenAPI

        :param account: The account of this V0038JobResponseProperties.  # noqa: E501
        :type account: str
        :param accrue_time: The accrue_time of this V0038JobResponseProperties.  # noqa: E501
        :type accrue_time: int
        :param admin_comment: The admin_comment of this V0038JobResponseProperties.  # noqa: E501
        :type admin_comment: str
        :param array_job_id: The array_job_id of this V0038JobResponseProperties.  # noqa: E501
        :type array_job_id: int
        :param array_task_id: The array_task_id of this V0038JobResponseProperties.  # noqa: E501
        :type array_task_id: int
        :param array_max_tasks: The array_max_tasks of this V0038JobResponseProperties.  # noqa: E501
        :type array_max_tasks: int
        :param array_task_string: The array_task_string of this V0038JobResponseProperties.  # noqa: E501
        :type array_task_string: str
        :param association_id: The association_id of this V0038JobResponseProperties.  # noqa: E501
        :type association_id: int
        :param batch_features: The batch_features of this V0038JobResponseProperties.  # noqa: E501
        :type batch_features: str
        :param batch_flag: The batch_flag of this V0038JobResponseProperties.  # noqa: E501
        :type batch_flag: bool
        :param batch_host: The batch_host of this V0038JobResponseProperties.  # noqa: E501
        :type batch_host: str
        :param flags: The flags of this V0038JobResponseProperties.  # noqa: E501
        :type flags: List[str]
        :param burst_buffer: The burst_buffer of this V0038JobResponseProperties.  # noqa: E501
        :type burst_buffer: str
        :param burst_buffer_state: The burst_buffer_state of this V0038JobResponseProperties.  # noqa: E501
        :type burst_buffer_state: str
        :param cluster: The cluster of this V0038JobResponseProperties.  # noqa: E501
        :type cluster: str
        :param cluster_features: The cluster_features of this V0038JobResponseProperties.  # noqa: E501
        :type cluster_features: str
        :param command: The command of this V0038JobResponseProperties.  # noqa: E501
        :type command: str
        :param comment: The comment of this V0038JobResponseProperties.  # noqa: E501
        :type comment: str
        :param container: The container of this V0038JobResponseProperties.  # noqa: E501
        :type container: str
        :param contiguous: The contiguous of this V0038JobResponseProperties.  # noqa: E501
        :type contiguous: bool
        :param core_spec: The core_spec of this V0038JobResponseProperties.  # noqa: E501
        :type core_spec: str
        :param thread_spec: The thread_spec of this V0038JobResponseProperties.  # noqa: E501
        :type thread_spec: str
        :param cores_per_socket: The cores_per_socket of this V0038JobResponseProperties.  # noqa: E501
        :type cores_per_socket: str
        :param billable_tres: The billable_tres of this V0038JobResponseProperties.  # noqa: E501
        :type billable_tres: float
        :param cpus_per_task: The cpus_per_task of this V0038JobResponseProperties.  # noqa: E501
        :type cpus_per_task: str
        :param cpu_frequency_minimum: The cpu_frequency_minimum of this V0038JobResponseProperties.  # noqa: E501
        :type cpu_frequency_minimum: str
        :param cpu_frequency_maximum: The cpu_frequency_maximum of this V0038JobResponseProperties.  # noqa: E501
        :type cpu_frequency_maximum: str
        :param cpu_frequency_governor: The cpu_frequency_governor of this V0038JobResponseProperties.  # noqa: E501
        :type cpu_frequency_governor: str
        :param cpus_per_tres: The cpus_per_tres of this V0038JobResponseProperties.  # noqa: E501
        :type cpus_per_tres: str
        :param deadline: The deadline of this V0038JobResponseProperties.  # noqa: E501
        :type deadline: int
        :param delay_boot: The delay_boot of this V0038JobResponseProperties.  # noqa: E501
        :type delay_boot: int
        :param dependency: The dependency of this V0038JobResponseProperties.  # noqa: E501
        :type dependency: str
        :param derived_exit_code: The derived_exit_code of this V0038JobResponseProperties.  # noqa: E501
        :type derived_exit_code: int
        :param eligible_time: The eligible_time of this V0038JobResponseProperties.  # noqa: E501
        :type eligible_time: int
        :param end_time: The end_time of this V0038JobResponseProperties.  # noqa: E501
        :type end_time: int
        :param excluded_nodes: The excluded_nodes of this V0038JobResponseProperties.  # noqa: E501
        :type excluded_nodes: str
        :param exit_code: The exit_code of this V0038JobResponseProperties.  # noqa: E501
        :type exit_code: int
        :param features: The features of this V0038JobResponseProperties.  # noqa: E501
        :type features: str
        :param federation_origin: The federation_origin of this V0038JobResponseProperties.  # noqa: E501
        :type federation_origin: str
        :param federation_siblings_active: The federation_siblings_active of this V0038JobResponseProperties.  # noqa: E501
        :type federation_siblings_active: str
        :param federation_siblings_viable: The federation_siblings_viable of this V0038JobResponseProperties.  # noqa: E501
        :type federation_siblings_viable: str
        :param gres_detail: The gres_detail of this V0038JobResponseProperties.  # noqa: E501
        :type gres_detail: List[str]
        :param group_id: The group_id of this V0038JobResponseProperties.  # noqa: E501
        :type group_id: int
        :param job_id: The job_id of this V0038JobResponseProperties.  # noqa: E501
        :type job_id: int
        :param job_resources: The job_resources of this V0038JobResponseProperties.  # noqa: E501
        :type job_resources: V0038JobResources
        :param job_state: The job_state of this V0038JobResponseProperties.  # noqa: E501
        :type job_state: str
        :param last_sched_evaluation: The last_sched_evaluation of this V0038JobResponseProperties.  # noqa: E501
        :type last_sched_evaluation: int
        :param licenses: The licenses of this V0038JobResponseProperties.  # noqa: E501
        :type licenses: str
        :param max_cpus: The max_cpus of this V0038JobResponseProperties.  # noqa: E501
        :type max_cpus: int
        :param max_nodes: The max_nodes of this V0038JobResponseProperties.  # noqa: E501
        :type max_nodes: int
        :param mcs_label: The mcs_label of this V0038JobResponseProperties.  # noqa: E501
        :type mcs_label: str
        :param memory_per_tres: The memory_per_tres of this V0038JobResponseProperties.  # noqa: E501
        :type memory_per_tres: str
        :param name: The name of this V0038JobResponseProperties.  # noqa: E501
        :type name: str
        :param nodes: The nodes of this V0038JobResponseProperties.  # noqa: E501
        :type nodes: str
        :param nice: The nice of this V0038JobResponseProperties.  # noqa: E501
        :type nice: int
        :param tasks_per_core: The tasks_per_core of this V0038JobResponseProperties.  # noqa: E501
        :type tasks_per_core: int
        :param tasks_per_socket: The tasks_per_socket of this V0038JobResponseProperties.  # noqa: E501
        :type tasks_per_socket: int
        :param tasks_per_board: The tasks_per_board of this V0038JobResponseProperties.  # noqa: E501
        :type tasks_per_board: int
        :param cpus: The cpus of this V0038JobResponseProperties.  # noqa: E501
        :type cpus: int
        :param node_count: The node_count of this V0038JobResponseProperties.  # noqa: E501
        :type node_count: int
        :param tasks: The tasks of this V0038JobResponseProperties.  # noqa: E501
        :type tasks: int
        :param het_job_id: The het_job_id of this V0038JobResponseProperties.  # noqa: E501
        :type het_job_id: int
        :param het_job_id_set: The het_job_id_set of this V0038JobResponseProperties.  # noqa: E501
        :type het_job_id_set: str
        :param het_job_offset: The het_job_offset of this V0038JobResponseProperties.  # noqa: E501
        :type het_job_offset: int
        :param partition: The partition of this V0038JobResponseProperties.  # noqa: E501
        :type partition: str
        :param memory_per_node: The memory_per_node of this V0038JobResponseProperties.  # noqa: E501
        :type memory_per_node: int
        :param memory_per_cpu: The memory_per_cpu of this V0038JobResponseProperties.  # noqa: E501
        :type memory_per_cpu: int
        :param minimum_cpus_per_node: The minimum_cpus_per_node of this V0038JobResponseProperties.  # noqa: E501
        :type minimum_cpus_per_node: int
        :param minimum_tmp_disk_per_node: The minimum_tmp_disk_per_node of this V0038JobResponseProperties.  # noqa: E501
        :type minimum_tmp_disk_per_node: int
        :param preempt_time: The preempt_time of this V0038JobResponseProperties.  # noqa: E501
        :type preempt_time: int
        :param pre_sus_time: The pre_sus_time of this V0038JobResponseProperties.  # noqa: E501
        :type pre_sus_time: int
        :param priority: The priority of this V0038JobResponseProperties.  # noqa: E501
        :type priority: int
        :param profile: The profile of this V0038JobResponseProperties.  # noqa: E501
        :type profile: List[str]
        :param qos: The qos of this V0038JobResponseProperties.  # noqa: E501
        :type qos: str
        :param reboot: The reboot of this V0038JobResponseProperties.  # noqa: E501
        :type reboot: bool
        :param required_nodes: The required_nodes of this V0038JobResponseProperties.  # noqa: E501
        :type required_nodes: str
        :param requeue: The requeue of this V0038JobResponseProperties.  # noqa: E501
        :type requeue: bool
        :param resize_time: The resize_time of this V0038JobResponseProperties.  # noqa: E501
        :type resize_time: int
        :param restart_cnt: The restart_cnt of this V0038JobResponseProperties.  # noqa: E501
        :type restart_cnt: int
        :param resv_name: The resv_name of this V0038JobResponseProperties.  # noqa: E501
        :type resv_name: str
        :param shared: The shared of this V0038JobResponseProperties.  # noqa: E501
        :type shared: str
        :param show_flags: The show_flags of this V0038JobResponseProperties.  # noqa: E501
        :type show_flags: List[str]
        :param sockets_per_board: The sockets_per_board of this V0038JobResponseProperties.  # noqa: E501
        :type sockets_per_board: int
        :param sockets_per_node: The sockets_per_node of this V0038JobResponseProperties.  # noqa: E501
        :type sockets_per_node: int
        :param start_time: The start_time of this V0038JobResponseProperties.  # noqa: E501
        :type start_time: int
        :param state_description: The state_description of this V0038JobResponseProperties.  # noqa: E501
        :type state_description: str
        :param state_reason: The state_reason of this V0038JobResponseProperties.  # noqa: E501
        :type state_reason: str
        :param standard_error: The standard_error of this V0038JobResponseProperties.  # noqa: E501
        :type standard_error: str
        :param standard_input: The standard_input of this V0038JobResponseProperties.  # noqa: E501
        :type standard_input: str
        :param standard_output: The standard_output of this V0038JobResponseProperties.  # noqa: E501
        :type standard_output: str
        :param submit_time: The submit_time of this V0038JobResponseProperties.  # noqa: E501
        :type submit_time: int
        :param suspend_time: The suspend_time of this V0038JobResponseProperties.  # noqa: E501
        :type suspend_time: int
        :param system_comment: The system_comment of this V0038JobResponseProperties.  # noqa: E501
        :type system_comment: str
        :param time_limit: The time_limit of this V0038JobResponseProperties.  # noqa: E501
        :type time_limit: int
        :param time_minimum: The time_minimum of this V0038JobResponseProperties.  # noqa: E501
        :type time_minimum: int
        :param threads_per_core: The threads_per_core of this V0038JobResponseProperties.  # noqa: E501
        :type threads_per_core: int
        :param tres_bind: The tres_bind of this V0038JobResponseProperties.  # noqa: E501
        :type tres_bind: str
        :param tres_freq: The tres_freq of this V0038JobResponseProperties.  # noqa: E501
        :type tres_freq: str
        :param tres_per_job: The tres_per_job of this V0038JobResponseProperties.  # noqa: E501
        :type tres_per_job: str
        :param tres_per_node: The tres_per_node of this V0038JobResponseProperties.  # noqa: E501
        :type tres_per_node: str
        :param tres_per_socket: The tres_per_socket of this V0038JobResponseProperties.  # noqa: E501
        :type tres_per_socket: str
        :param tres_per_task: The tres_per_task of this V0038JobResponseProperties.  # noqa: E501
        :type tres_per_task: str
        :param tres_req_str: The tres_req_str of this V0038JobResponseProperties.  # noqa: E501
        :type tres_req_str: str
        :param tres_alloc_str: The tres_alloc_str of this V0038JobResponseProperties.  # noqa: E501
        :type tres_alloc_str: str
        :param user_id: The user_id of this V0038JobResponseProperties.  # noqa: E501
        :type user_id: int
        :param user_name: The user_name of this V0038JobResponseProperties.  # noqa: E501
        :type user_name: str
        :param wckey: The wckey of this V0038JobResponseProperties.  # noqa: E501
        :type wckey: str
        :param current_working_directory: The current_working_directory of this V0038JobResponseProperties.  # noqa: E501
        :type current_working_directory: str
        """
        self.openapi_types = {
            'account': str,
            'accrue_time': int,
            'admin_comment': str,
            'array_job_id': int,
            'array_task_id': int,
            'array_max_tasks': int,
            'array_task_string': str,
            'association_id': int,
            'batch_features': str,
            'batch_flag': bool,
            'batch_host': str,
            'flags': List[str],
            'burst_buffer': str,
            'burst_buffer_state': str,
            'cluster': str,
            'cluster_features': str,
            'command': str,
            'comment': str,
            'container': str,
            'contiguous': bool,
            'core_spec': str,
            'thread_spec': str,
            'cores_per_socket': str,
            'billable_tres': float,
            'cpus_per_task': str,
            'cpu_frequency_minimum': str,
            'cpu_frequency_maximum': str,
            'cpu_frequency_governor': str,
            'cpus_per_tres': str,
            'deadline': int,
            'delay_boot': int,
            'dependency': str,
            'derived_exit_code': int,
            'eligible_time': int,
            'end_time': int,
            'excluded_nodes': str,
            'exit_code': int,
            'features': str,
            'federation_origin': str,
            'federation_siblings_active': str,
            'federation_siblings_viable': str,
            'gres_detail': List[str],
            'group_id': int,
            'job_id': int,
            'job_resources': V0038JobResources,
            'job_state': str,
            'last_sched_evaluation': int,
            'licenses': str,
            'max_cpus': int,
            'max_nodes': int,
            'mcs_label': str,
            'memory_per_tres': str,
            'name': str,
            'nodes': str,
            'nice': int,
            'tasks_per_core': int,
            'tasks_per_socket': int,
            'tasks_per_board': int,
            'cpus': int,
            'node_count': int,
            'tasks': int,
            'het_job_id': int,
            'het_job_id_set': str,
            'het_job_offset': int,
            'partition': str,
            'memory_per_node': int,
            'memory_per_cpu': int,
            'minimum_cpus_per_node': int,
            'minimum_tmp_disk_per_node': int,
            'preempt_time': int,
            'pre_sus_time': int,
            'priority': int,
            'profile': List[str],
            'qos': str,
            'reboot': bool,
            'required_nodes': str,
            'requeue': bool,
            'resize_time': int,
            'restart_cnt': int,
            'resv_name': str,
            'shared': str,
            'show_flags': List[str],
            'sockets_per_board': int,
            'sockets_per_node': int,
            'start_time': int,
            'state_description': str,
            'state_reason': str,
            'standard_error': str,
            'standard_input': str,
            'standard_output': str,
            'submit_time': int,
            'suspend_time': int,
            'system_comment': str,
            'time_limit': int,
            'time_minimum': int,
            'threads_per_core': int,
            'tres_bind': str,
            'tres_freq': str,
            'tres_per_job': str,
            'tres_per_node': str,
            'tres_per_socket': str,
            'tres_per_task': str,
            'tres_req_str': str,
            'tres_alloc_str': str,
            'user_id': int,
            'user_name': str,
            'wckey': str,
            'current_working_directory': str
        }

        self.attribute_map = {
            'account': 'account',
            'accrue_time': 'accrue_time',
            'admin_comment': 'admin_comment',
            'array_job_id': 'array_job_id',
            'array_task_id': 'array_task_id',
            'array_max_tasks': 'array_max_tasks',
            'array_task_string': 'array_task_string',
            'association_id': 'association_id',
            'batch_features': 'batch_features',
            'batch_flag': 'batch_flag',
            'batch_host': 'batch_host',
            'flags': 'flags',
            'burst_buffer': 'burst_buffer',
            'burst_buffer_state': 'burst_buffer_state',
            'cluster': 'cluster',
            'cluster_features': 'cluster_features',
            'command': 'command',
            'comment': 'comment',
            'container': 'container',
            'contiguous': 'contiguous',
            'core_spec': 'core_spec',
            'thread_spec': 'thread_spec',
            'cores_per_socket': 'cores_per_socket',
            'billable_tres': 'billable_tres',
            'cpus_per_task': 'cpus_per_task',
            'cpu_frequency_minimum': 'cpu_frequency_minimum',
            'cpu_frequency_maximum': 'cpu_frequency_maximum',
            'cpu_frequency_governor': 'cpu_frequency_governor',
            'cpus_per_tres': 'cpus_per_tres',
            'deadline': 'deadline',
            'delay_boot': 'delay_boot',
            'dependency': 'dependency',
            'derived_exit_code': 'derived_exit_code',
            'eligible_time': 'eligible_time',
            'end_time': 'end_time',
            'excluded_nodes': 'excluded_nodes',
            'exit_code': 'exit_code',
            'features': 'features',
            'federation_origin': 'federation_origin',
            'federation_siblings_active': 'federation_siblings_active',
            'federation_siblings_viable': 'federation_siblings_viable',
            'gres_detail': 'gres_detail',
            'group_id': 'group_id',
            'job_id': 'job_id',
            'job_resources': 'job_resources',
            'job_state': 'job_state',
            'last_sched_evaluation': 'last_sched_evaluation',
            'licenses': 'licenses',
            'max_cpus': 'max_cpus',
            'max_nodes': 'max_nodes',
            'mcs_label': 'mcs_label',
            'memory_per_tres': 'memory_per_tres',
            'name': 'name',
            'nodes': 'nodes',
            'nice': 'nice',
            'tasks_per_core': 'tasks_per_core',
            'tasks_per_socket': 'tasks_per_socket',
            'tasks_per_board': 'tasks_per_board',
            'cpus': 'cpus',
            'node_count': 'node_count',
            'tasks': 'tasks',
            'het_job_id': 'het_job_id',
            'het_job_id_set': 'het_job_id_set',
            'het_job_offset': 'het_job_offset',
            'partition': 'partition',
            'memory_per_node': 'memory_per_node',
            'memory_per_cpu': 'memory_per_cpu',
            'minimum_cpus_per_node': 'minimum_cpus_per_node',
            'minimum_tmp_disk_per_node': 'minimum_tmp_disk_per_node',
            'preempt_time': 'preempt_time',
            'pre_sus_time': 'pre_sus_time',
            'priority': 'priority',
            'profile': 'profile',
            'qos': 'qos',
            'reboot': 'reboot',
            'required_nodes': 'required_nodes',
            'requeue': 'requeue',
            'resize_time': 'resize_time',
            'restart_cnt': 'restart_cnt',
            'resv_name': 'resv_name',
            'shared': 'shared',
            'show_flags': 'show_flags',
            'sockets_per_board': 'sockets_per_board',
            'sockets_per_node': 'sockets_per_node',
            'start_time': 'start_time',
            'state_description': 'state_description',
            'state_reason': 'state_reason',
            'standard_error': 'standard_error',
            'standard_input': 'standard_input',
            'standard_output': 'standard_output',
            'submit_time': 'submit_time',
            'suspend_time': 'suspend_time',
            'system_comment': 'system_comment',
            'time_limit': 'time_limit',
            'time_minimum': 'time_minimum',
            'threads_per_core': 'threads_per_core',
            'tres_bind': 'tres_bind',
            'tres_freq': 'tres_freq',
            'tres_per_job': 'tres_per_job',
            'tres_per_node': 'tres_per_node',
            'tres_per_socket': 'tres_per_socket',
            'tres_per_task': 'tres_per_task',
            'tres_req_str': 'tres_req_str',
            'tres_alloc_str': 'tres_alloc_str',
            'user_id': 'user_id',
            'user_name': 'user_name',
            'wckey': 'wckey',
            'current_working_directory': 'current_working_directory'
        }

        self._account = account
        self._accrue_time = accrue_time
        self._admin_comment = admin_comment
        self._array_job_id = array_job_id
        self._array_task_id = array_task_id
        self._array_max_tasks = array_max_tasks
        self._array_task_string = array_task_string
        self._association_id = association_id
        self._batch_features = batch_features
        self._batch_flag = batch_flag
        self._batch_host = batch_host
        self._flags = flags
        self._burst_buffer = burst_buffer
        self._burst_buffer_state = burst_buffer_state
        self._cluster = cluster
        self._cluster_features = cluster_features
        self._command = command
        self._comment = comment
        self._container = container
        self._contiguous = contiguous
        self._core_spec = core_spec
        self._thread_spec = thread_spec
        self._cores_per_socket = cores_per_socket
        self._billable_tres = billable_tres
        self._cpus_per_task = cpus_per_task
        self._cpu_frequency_minimum = cpu_frequency_minimum
        self._cpu_frequency_maximum = cpu_frequency_maximum
        self._cpu_frequency_governor = cpu_frequency_governor
        self._cpus_per_tres = cpus_per_tres
        self._deadline = deadline
        self._delay_boot = delay_boot
        self._dependency = dependency
        self._derived_exit_code = derived_exit_code
        self._eligible_time = eligible_time
        self._end_time = end_time
        self._excluded_nodes = excluded_nodes
        self._exit_code = exit_code
        self._features = features
        self._federation_origin = federation_origin
        self._federation_siblings_active = federation_siblings_active
        self._federation_siblings_viable = federation_siblings_viable
        self._gres_detail = gres_detail
        self._group_id = group_id
        self._job_id = job_id
        self._job_resources = job_resources
        self._job_state = job_state
        self._last_sched_evaluation = last_sched_evaluation
        self._licenses = licenses
        self._max_cpus = max_cpus
        self._max_nodes = max_nodes
        self._mcs_label = mcs_label
        self._memory_per_tres = memory_per_tres
        self._name = name
        self._nodes = nodes
        self._nice = nice
        self._tasks_per_core = tasks_per_core
        self._tasks_per_socket = tasks_per_socket
        self._tasks_per_board = tasks_per_board
        self._cpus = cpus
        self._node_count = node_count
        self._tasks = tasks
        self._het_job_id = het_job_id
        self._het_job_id_set = het_job_id_set
        self._het_job_offset = het_job_offset
        self._partition = partition
        self._memory_per_node = memory_per_node
        self._memory_per_cpu = memory_per_cpu
        self._minimum_cpus_per_node = minimum_cpus_per_node
        self._minimum_tmp_disk_per_node = minimum_tmp_disk_per_node
        self._preempt_time = preempt_time
        self._pre_sus_time = pre_sus_time
        self._priority = priority
        self._profile = profile
        self._qos = qos
        self._reboot = reboot
        self._required_nodes = required_nodes
        self._requeue = requeue
        self._resize_time = resize_time
        self._restart_cnt = restart_cnt
        self._resv_name = resv_name
        self._shared = shared
        self._show_flags = show_flags
        self._sockets_per_board = sockets_per_board
        self._sockets_per_node = sockets_per_node
        self._start_time = start_time
        self._state_description = state_description
        self._state_reason = state_reason
        self._standard_error = standard_error
        self._standard_input = standard_input
        self._standard_output = standard_output
        self._submit_time = submit_time
        self._suspend_time = suspend_time
        self._system_comment = system_comment
        self._time_limit = time_limit
        self._time_minimum = time_minimum
        self._threads_per_core = threads_per_core
        self._tres_bind = tres_bind
        self._tres_freq = tres_freq
        self._tres_per_job = tres_per_job
        self._tres_per_node = tres_per_node
        self._tres_per_socket = tres_per_socket
        self._tres_per_task = tres_per_task
        self._tres_req_str = tres_req_str
        self._tres_alloc_str = tres_alloc_str
        self._user_id = user_id
        self._user_name = user_name
        self._wckey = wckey
        self._current_working_directory = current_working_directory

    @classmethod
    def from_dict(cls, dikt) -> 'V0038JobResponseProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The v0.0.38_job_response_properties of this V0038JobResponseProperties.  # noqa: E501
        :rtype: V0038JobResponseProperties
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self) -> str:
        """Gets the account of this V0038JobResponseProperties.

        Charge resources used by this job to specified account  # noqa: E501

        :return: The account of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account: str):
        """Sets the account of this V0038JobResponseProperties.

        Charge resources used by this job to specified account  # noqa: E501

        :param account: The account of this V0038JobResponseProperties.
        :type account: str
        """

        self._account = account

    @property
    def accrue_time(self) -> int:
        """Gets the accrue_time of this V0038JobResponseProperties.

        time job is eligible for running  # noqa: E501

        :return: The accrue_time of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._accrue_time

    @accrue_time.setter
    def accrue_time(self, accrue_time: int):
        """Sets the accrue_time of this V0038JobResponseProperties.

        time job is eligible for running  # noqa: E501

        :param accrue_time: The accrue_time of this V0038JobResponseProperties.
        :type accrue_time: int
        """

        self._accrue_time = accrue_time

    @property
    def admin_comment(self) -> str:
        """Gets the admin_comment of this V0038JobResponseProperties.

        administrator's arbitrary comment  # noqa: E501

        :return: The admin_comment of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._admin_comment

    @admin_comment.setter
    def admin_comment(self, admin_comment: str):
        """Sets the admin_comment of this V0038JobResponseProperties.

        administrator's arbitrary comment  # noqa: E501

        :param admin_comment: The admin_comment of this V0038JobResponseProperties.
        :type admin_comment: str
        """

        self._admin_comment = admin_comment

    @property
    def array_job_id(self) -> int:
        """Gets the array_job_id of this V0038JobResponseProperties.

        job_id of a job array or 0 if N/A  # noqa: E501

        :return: The array_job_id of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._array_job_id

    @array_job_id.setter
    def array_job_id(self, array_job_id: int):
        """Sets the array_job_id of this V0038JobResponseProperties.

        job_id of a job array or 0 if N/A  # noqa: E501

        :param array_job_id: The array_job_id of this V0038JobResponseProperties.
        :type array_job_id: int
        """

        self._array_job_id = array_job_id

    @property
    def array_task_id(self) -> int:
        """Gets the array_task_id of this V0038JobResponseProperties.

        task_id of a job array  # noqa: E501

        :return: The array_task_id of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._array_task_id

    @array_task_id.setter
    def array_task_id(self, array_task_id: int):
        """Sets the array_task_id of this V0038JobResponseProperties.

        task_id of a job array  # noqa: E501

        :param array_task_id: The array_task_id of this V0038JobResponseProperties.
        :type array_task_id: int
        """

        self._array_task_id = array_task_id

    @property
    def array_max_tasks(self) -> int:
        """Gets the array_max_tasks of this V0038JobResponseProperties.

        Maximum number of running array tasks  # noqa: E501

        :return: The array_max_tasks of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._array_max_tasks

    @array_max_tasks.setter
    def array_max_tasks(self, array_max_tasks: int):
        """Sets the array_max_tasks of this V0038JobResponseProperties.

        Maximum number of running array tasks  # noqa: E501

        :param array_max_tasks: The array_max_tasks of this V0038JobResponseProperties.
        :type array_max_tasks: int
        """

        self._array_max_tasks = array_max_tasks

    @property
    def array_task_string(self) -> str:
        """Gets the array_task_string of this V0038JobResponseProperties.

        string expression of task IDs in this record  # noqa: E501

        :return: The array_task_string of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._array_task_string

    @array_task_string.setter
    def array_task_string(self, array_task_string: str):
        """Sets the array_task_string of this V0038JobResponseProperties.

        string expression of task IDs in this record  # noqa: E501

        :param array_task_string: The array_task_string of this V0038JobResponseProperties.
        :type array_task_string: str
        """

        self._array_task_string = array_task_string

    @property
    def association_id(self) -> int:
        """Gets the association_id of this V0038JobResponseProperties.

        association id for job  # noqa: E501

        :return: The association_id of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._association_id

    @association_id.setter
    def association_id(self, association_id: int):
        """Sets the association_id of this V0038JobResponseProperties.

        association id for job  # noqa: E501

        :param association_id: The association_id of this V0038JobResponseProperties.
        :type association_id: int
        """

        self._association_id = association_id

    @property
    def batch_features(self) -> str:
        """Gets the batch_features of this V0038JobResponseProperties.

        features required for batch script's node  # noqa: E501

        :return: The batch_features of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._batch_features

    @batch_features.setter
    def batch_features(self, batch_features: str):
        """Sets the batch_features of this V0038JobResponseProperties.

        features required for batch script's node  # noqa: E501

        :param batch_features: The batch_features of this V0038JobResponseProperties.
        :type batch_features: str
        """

        self._batch_features = batch_features

    @property
    def batch_flag(self) -> bool:
        """Gets the batch_flag of this V0038JobResponseProperties.

        if batch: queued job with script  # noqa: E501

        :return: The batch_flag of this V0038JobResponseProperties.
        :rtype: bool
        """
        return self._batch_flag

    @batch_flag.setter
    def batch_flag(self, batch_flag: bool):
        """Sets the batch_flag of this V0038JobResponseProperties.

        if batch: queued job with script  # noqa: E501

        :param batch_flag: The batch_flag of this V0038JobResponseProperties.
        :type batch_flag: bool
        """

        self._batch_flag = batch_flag

    @property
    def batch_host(self) -> str:
        """Gets the batch_host of this V0038JobResponseProperties.

        name of host running batch script  # noqa: E501

        :return: The batch_host of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._batch_host

    @batch_host.setter
    def batch_host(self, batch_host: str):
        """Sets the batch_host of this V0038JobResponseProperties.

        name of host running batch script  # noqa: E501

        :param batch_host: The batch_host of this V0038JobResponseProperties.
        :type batch_host: str
        """

        self._batch_host = batch_host

    @property
    def flags(self) -> List[str]:
        """Gets the flags of this V0038JobResponseProperties.

        Job flags  # noqa: E501

        :return: The flags of this V0038JobResponseProperties.
        :rtype: List[str]
        """
        return self._flags

    @flags.setter
    def flags(self, flags: List[str]):
        """Sets the flags of this V0038JobResponseProperties.

        Job flags  # noqa: E501

        :param flags: The flags of this V0038JobResponseProperties.
        :type flags: List[str]
        """

        self._flags = flags

    @property
    def burst_buffer(self) -> str:
        """Gets the burst_buffer of this V0038JobResponseProperties.

        burst buffer specifications  # noqa: E501

        :return: The burst_buffer of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._burst_buffer

    @burst_buffer.setter
    def burst_buffer(self, burst_buffer: str):
        """Sets the burst_buffer of this V0038JobResponseProperties.

        burst buffer specifications  # noqa: E501

        :param burst_buffer: The burst_buffer of this V0038JobResponseProperties.
        :type burst_buffer: str
        """

        self._burst_buffer = burst_buffer

    @property
    def burst_buffer_state(self) -> str:
        """Gets the burst_buffer_state of this V0038JobResponseProperties.

        burst buffer state info  # noqa: E501

        :return: The burst_buffer_state of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._burst_buffer_state

    @burst_buffer_state.setter
    def burst_buffer_state(self, burst_buffer_state: str):
        """Sets the burst_buffer_state of this V0038JobResponseProperties.

        burst buffer state info  # noqa: E501

        :param burst_buffer_state: The burst_buffer_state of this V0038JobResponseProperties.
        :type burst_buffer_state: str
        """

        self._burst_buffer_state = burst_buffer_state

    @property
    def cluster(self) -> str:
        """Gets the cluster of this V0038JobResponseProperties.

        name of cluster that the job is on  # noqa: E501

        :return: The cluster of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster: str):
        """Sets the cluster of this V0038JobResponseProperties.

        name of cluster that the job is on  # noqa: E501

        :param cluster: The cluster of this V0038JobResponseProperties.
        :type cluster: str
        """

        self._cluster = cluster

    @property
    def cluster_features(self) -> str:
        """Gets the cluster_features of this V0038JobResponseProperties.

        comma separated list of required cluster features  # noqa: E501

        :return: The cluster_features of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._cluster_features

    @cluster_features.setter
    def cluster_features(self, cluster_features: str):
        """Sets the cluster_features of this V0038JobResponseProperties.

        comma separated list of required cluster features  # noqa: E501

        :param cluster_features: The cluster_features of this V0038JobResponseProperties.
        :type cluster_features: str
        """

        self._cluster_features = cluster_features

    @property
    def command(self) -> str:
        """Gets the command of this V0038JobResponseProperties.

        command to be executed  # noqa: E501

        :return: The command of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command: str):
        """Sets the command of this V0038JobResponseProperties.

        command to be executed  # noqa: E501

        :param command: The command of this V0038JobResponseProperties.
        :type command: str
        """

        self._command = command

    @property
    def comment(self) -> str:
        """Gets the comment of this V0038JobResponseProperties.

        arbitrary comment  # noqa: E501

        :return: The comment of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment: str):
        """Sets the comment of this V0038JobResponseProperties.

        arbitrary comment  # noqa: E501

        :param comment: The comment of this V0038JobResponseProperties.
        :type comment: str
        """

        self._comment = comment

    @property
    def container(self) -> str:
        """Gets the container of this V0038JobResponseProperties.

        absolute path to OCI container bundle  # noqa: E501

        :return: The container of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container: str):
        """Sets the container of this V0038JobResponseProperties.

        absolute path to OCI container bundle  # noqa: E501

        :param container: The container of this V0038JobResponseProperties.
        :type container: str
        """

        self._container = container

    @property
    def contiguous(self) -> bool:
        """Gets the contiguous of this V0038JobResponseProperties.

        job requires contiguous nodes  # noqa: E501

        :return: The contiguous of this V0038JobResponseProperties.
        :rtype: bool
        """
        return self._contiguous

    @contiguous.setter
    def contiguous(self, contiguous: bool):
        """Sets the contiguous of this V0038JobResponseProperties.

        job requires contiguous nodes  # noqa: E501

        :param contiguous: The contiguous of this V0038JobResponseProperties.
        :type contiguous: bool
        """

        self._contiguous = contiguous

    @property
    def core_spec(self) -> str:
        """Gets the core_spec of this V0038JobResponseProperties.

        specialized core count  # noqa: E501

        :return: The core_spec of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._core_spec

    @core_spec.setter
    def core_spec(self, core_spec: str):
        """Sets the core_spec of this V0038JobResponseProperties.

        specialized core count  # noqa: E501

        :param core_spec: The core_spec of this V0038JobResponseProperties.
        :type core_spec: str
        """

        self._core_spec = core_spec

    @property
    def thread_spec(self) -> str:
        """Gets the thread_spec of this V0038JobResponseProperties.

        specialized thread count  # noqa: E501

        :return: The thread_spec of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._thread_spec

    @thread_spec.setter
    def thread_spec(self, thread_spec: str):
        """Sets the thread_spec of this V0038JobResponseProperties.

        specialized thread count  # noqa: E501

        :param thread_spec: The thread_spec of this V0038JobResponseProperties.
        :type thread_spec: str
        """

        self._thread_spec = thread_spec

    @property
    def cores_per_socket(self) -> str:
        """Gets the cores_per_socket of this V0038JobResponseProperties.

        cores per socket required by job  # noqa: E501

        :return: The cores_per_socket of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._cores_per_socket

    @cores_per_socket.setter
    def cores_per_socket(self, cores_per_socket: str):
        """Sets the cores_per_socket of this V0038JobResponseProperties.

        cores per socket required by job  # noqa: E501

        :param cores_per_socket: The cores_per_socket of this V0038JobResponseProperties.
        :type cores_per_socket: str
        """

        self._cores_per_socket = cores_per_socket

    @property
    def billable_tres(self) -> float:
        """Gets the billable_tres of this V0038JobResponseProperties.

        billable TRES  # noqa: E501

        :return: The billable_tres of this V0038JobResponseProperties.
        :rtype: float
        """
        return self._billable_tres

    @billable_tres.setter
    def billable_tres(self, billable_tres: float):
        """Sets the billable_tres of this V0038JobResponseProperties.

        billable TRES  # noqa: E501

        :param billable_tres: The billable_tres of this V0038JobResponseProperties.
        :type billable_tres: float
        """

        self._billable_tres = billable_tres

    @property
    def cpus_per_task(self) -> str:
        """Gets the cpus_per_task of this V0038JobResponseProperties.

        number of processors required for each task  # noqa: E501

        :return: The cpus_per_task of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._cpus_per_task

    @cpus_per_task.setter
    def cpus_per_task(self, cpus_per_task: str):
        """Sets the cpus_per_task of this V0038JobResponseProperties.

        number of processors required for each task  # noqa: E501

        :param cpus_per_task: The cpus_per_task of this V0038JobResponseProperties.
        :type cpus_per_task: str
        """

        self._cpus_per_task = cpus_per_task

    @property
    def cpu_frequency_minimum(self) -> str:
        """Gets the cpu_frequency_minimum of this V0038JobResponseProperties.

        Minimum cpu frequency  # noqa: E501

        :return: The cpu_frequency_minimum of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._cpu_frequency_minimum

    @cpu_frequency_minimum.setter
    def cpu_frequency_minimum(self, cpu_frequency_minimum: str):
        """Sets the cpu_frequency_minimum of this V0038JobResponseProperties.

        Minimum cpu frequency  # noqa: E501

        :param cpu_frequency_minimum: The cpu_frequency_minimum of this V0038JobResponseProperties.
        :type cpu_frequency_minimum: str
        """

        self._cpu_frequency_minimum = cpu_frequency_minimum

    @property
    def cpu_frequency_maximum(self) -> str:
        """Gets the cpu_frequency_maximum of this V0038JobResponseProperties.

        Maximum cpu frequency  # noqa: E501

        :return: The cpu_frequency_maximum of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._cpu_frequency_maximum

    @cpu_frequency_maximum.setter
    def cpu_frequency_maximum(self, cpu_frequency_maximum: str):
        """Sets the cpu_frequency_maximum of this V0038JobResponseProperties.

        Maximum cpu frequency  # noqa: E501

        :param cpu_frequency_maximum: The cpu_frequency_maximum of this V0038JobResponseProperties.
        :type cpu_frequency_maximum: str
        """

        self._cpu_frequency_maximum = cpu_frequency_maximum

    @property
    def cpu_frequency_governor(self) -> str:
        """Gets the cpu_frequency_governor of this V0038JobResponseProperties.

        cpu frequency governor  # noqa: E501

        :return: The cpu_frequency_governor of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._cpu_frequency_governor

    @cpu_frequency_governor.setter
    def cpu_frequency_governor(self, cpu_frequency_governor: str):
        """Sets the cpu_frequency_governor of this V0038JobResponseProperties.

        cpu frequency governor  # noqa: E501

        :param cpu_frequency_governor: The cpu_frequency_governor of this V0038JobResponseProperties.
        :type cpu_frequency_governor: str
        """

        self._cpu_frequency_governor = cpu_frequency_governor

    @property
    def cpus_per_tres(self) -> str:
        """Gets the cpus_per_tres of this V0038JobResponseProperties.

        semicolon delimited list of TRES=# values  # noqa: E501

        :return: The cpus_per_tres of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._cpus_per_tres

    @cpus_per_tres.setter
    def cpus_per_tres(self, cpus_per_tres: str):
        """Sets the cpus_per_tres of this V0038JobResponseProperties.

        semicolon delimited list of TRES=# values  # noqa: E501

        :param cpus_per_tres: The cpus_per_tres of this V0038JobResponseProperties.
        :type cpus_per_tres: str
        """

        self._cpus_per_tres = cpus_per_tres

    @property
    def deadline(self) -> int:
        """Gets the deadline of this V0038JobResponseProperties.

        job start deadline   # noqa: E501

        :return: The deadline of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._deadline

    @deadline.setter
    def deadline(self, deadline: int):
        """Sets the deadline of this V0038JobResponseProperties.

        job start deadline   # noqa: E501

        :param deadline: The deadline of this V0038JobResponseProperties.
        :type deadline: int
        """

        self._deadline = deadline

    @property
    def delay_boot(self) -> int:
        """Gets the delay_boot of this V0038JobResponseProperties.

        command to be executed  # noqa: E501

        :return: The delay_boot of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._delay_boot

    @delay_boot.setter
    def delay_boot(self, delay_boot: int):
        """Sets the delay_boot of this V0038JobResponseProperties.

        command to be executed  # noqa: E501

        :param delay_boot: The delay_boot of this V0038JobResponseProperties.
        :type delay_boot: int
        """

        self._delay_boot = delay_boot

    @property
    def dependency(self) -> str:
        """Gets the dependency of this V0038JobResponseProperties.

        synchronize job execution with other jobs  # noqa: E501

        :return: The dependency of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._dependency

    @dependency.setter
    def dependency(self, dependency: str):
        """Sets the dependency of this V0038JobResponseProperties.

        synchronize job execution with other jobs  # noqa: E501

        :param dependency: The dependency of this V0038JobResponseProperties.
        :type dependency: str
        """

        self._dependency = dependency

    @property
    def derived_exit_code(self) -> int:
        """Gets the derived_exit_code of this V0038JobResponseProperties.

        highest exit code of all job steps  # noqa: E501

        :return: The derived_exit_code of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._derived_exit_code

    @derived_exit_code.setter
    def derived_exit_code(self, derived_exit_code: int):
        """Sets the derived_exit_code of this V0038JobResponseProperties.

        highest exit code of all job steps  # noqa: E501

        :param derived_exit_code: The derived_exit_code of this V0038JobResponseProperties.
        :type derived_exit_code: int
        """

        self._derived_exit_code = derived_exit_code

    @property
    def eligible_time(self) -> int:
        """Gets the eligible_time of this V0038JobResponseProperties.

        time job is eligible for running  # noqa: E501

        :return: The eligible_time of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._eligible_time

    @eligible_time.setter
    def eligible_time(self, eligible_time: int):
        """Sets the eligible_time of this V0038JobResponseProperties.

        time job is eligible for running  # noqa: E501

        :param eligible_time: The eligible_time of this V0038JobResponseProperties.
        :type eligible_time: int
        """

        self._eligible_time = eligible_time

    @property
    def end_time(self) -> int:
        """Gets the end_time of this V0038JobResponseProperties.

        time of termination, actual or expected  # noqa: E501

        :return: The end_time of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time: int):
        """Sets the end_time of this V0038JobResponseProperties.

        time of termination, actual or expected  # noqa: E501

        :param end_time: The end_time of this V0038JobResponseProperties.
        :type end_time: int
        """

        self._end_time = end_time

    @property
    def excluded_nodes(self) -> str:
        """Gets the excluded_nodes of this V0038JobResponseProperties.

        comma separated list of excluded nodes  # noqa: E501

        :return: The excluded_nodes of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._excluded_nodes

    @excluded_nodes.setter
    def excluded_nodes(self, excluded_nodes: str):
        """Sets the excluded_nodes of this V0038JobResponseProperties.

        comma separated list of excluded nodes  # noqa: E501

        :param excluded_nodes: The excluded_nodes of this V0038JobResponseProperties.
        :type excluded_nodes: str
        """

        self._excluded_nodes = excluded_nodes

    @property
    def exit_code(self) -> int:
        """Gets the exit_code of this V0038JobResponseProperties.

        exit code for job  # noqa: E501

        :return: The exit_code of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._exit_code

    @exit_code.setter
    def exit_code(self, exit_code: int):
        """Sets the exit_code of this V0038JobResponseProperties.

        exit code for job  # noqa: E501

        :param exit_code: The exit_code of this V0038JobResponseProperties.
        :type exit_code: int
        """

        self._exit_code = exit_code

    @property
    def features(self) -> str:
        """Gets the features of this V0038JobResponseProperties.

        comma separated list of required features  # noqa: E501

        :return: The features of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._features

    @features.setter
    def features(self, features: str):
        """Sets the features of this V0038JobResponseProperties.

        comma separated list of required features  # noqa: E501

        :param features: The features of this V0038JobResponseProperties.
        :type features: str
        """

        self._features = features

    @property
    def federation_origin(self) -> str:
        """Gets the federation_origin of this V0038JobResponseProperties.

        Origin cluster's name  # noqa: E501

        :return: The federation_origin of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._federation_origin

    @federation_origin.setter
    def federation_origin(self, federation_origin: str):
        """Sets the federation_origin of this V0038JobResponseProperties.

        Origin cluster's name  # noqa: E501

        :param federation_origin: The federation_origin of this V0038JobResponseProperties.
        :type federation_origin: str
        """

        self._federation_origin = federation_origin

    @property
    def federation_siblings_active(self) -> str:
        """Gets the federation_siblings_active of this V0038JobResponseProperties.

        string of active sibling names  # noqa: E501

        :return: The federation_siblings_active of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._federation_siblings_active

    @federation_siblings_active.setter
    def federation_siblings_active(self, federation_siblings_active: str):
        """Sets the federation_siblings_active of this V0038JobResponseProperties.

        string of active sibling names  # noqa: E501

        :param federation_siblings_active: The federation_siblings_active of this V0038JobResponseProperties.
        :type federation_siblings_active: str
        """

        self._federation_siblings_active = federation_siblings_active

    @property
    def federation_siblings_viable(self) -> str:
        """Gets the federation_siblings_viable of this V0038JobResponseProperties.

        string of viable sibling names  # noqa: E501

        :return: The federation_siblings_viable of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._federation_siblings_viable

    @federation_siblings_viable.setter
    def federation_siblings_viable(self, federation_siblings_viable: str):
        """Sets the federation_siblings_viable of this V0038JobResponseProperties.

        string of viable sibling names  # noqa: E501

        :param federation_siblings_viable: The federation_siblings_viable of this V0038JobResponseProperties.
        :type federation_siblings_viable: str
        """

        self._federation_siblings_viable = federation_siblings_viable

    @property
    def gres_detail(self) -> List[str]:
        """Gets the gres_detail of this V0038JobResponseProperties.

        Job flags  # noqa: E501

        :return: The gres_detail of this V0038JobResponseProperties.
        :rtype: List[str]
        """
        return self._gres_detail

    @gres_detail.setter
    def gres_detail(self, gres_detail: List[str]):
        """Sets the gres_detail of this V0038JobResponseProperties.

        Job flags  # noqa: E501

        :param gres_detail: The gres_detail of this V0038JobResponseProperties.
        :type gres_detail: List[str]
        """

        self._gres_detail = gres_detail

    @property
    def group_id(self) -> int:
        """Gets the group_id of this V0038JobResponseProperties.

        group job submitted as  # noqa: E501

        :return: The group_id of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id: int):
        """Sets the group_id of this V0038JobResponseProperties.

        group job submitted as  # noqa: E501

        :param group_id: The group_id of this V0038JobResponseProperties.
        :type group_id: int
        """

        self._group_id = group_id

    @property
    def job_id(self) -> int:
        """Gets the job_id of this V0038JobResponseProperties.

        job ID  # noqa: E501

        :return: The job_id of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id: int):
        """Sets the job_id of this V0038JobResponseProperties.

        job ID  # noqa: E501

        :param job_id: The job_id of this V0038JobResponseProperties.
        :type job_id: int
        """

        self._job_id = job_id

    @property
    def job_resources(self) -> V0038JobResources:
        """Gets the job_resources of this V0038JobResponseProperties.


        :return: The job_resources of this V0038JobResponseProperties.
        :rtype: V0038JobResources
        """
        return self._job_resources

    @job_resources.setter
    def job_resources(self, job_resources: V0038JobResources):
        """Sets the job_resources of this V0038JobResponseProperties.


        :param job_resources: The job_resources of this V0038JobResponseProperties.
        :type job_resources: V0038JobResources
        """

        self._job_resources = job_resources

    @property
    def job_state(self) -> str:
        """Gets the job_state of this V0038JobResponseProperties.

        state of the job  # noqa: E501

        :return: The job_state of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._job_state

    @job_state.setter
    def job_state(self, job_state: str):
        """Sets the job_state of this V0038JobResponseProperties.

        state of the job  # noqa: E501

        :param job_state: The job_state of this V0038JobResponseProperties.
        :type job_state: str
        """

        self._job_state = job_state

    @property
    def last_sched_evaluation(self) -> int:
        """Gets the last_sched_evaluation of this V0038JobResponseProperties.

        last time job was evaluated for scheduling  # noqa: E501

        :return: The last_sched_evaluation of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._last_sched_evaluation

    @last_sched_evaluation.setter
    def last_sched_evaluation(self, last_sched_evaluation: int):
        """Sets the last_sched_evaluation of this V0038JobResponseProperties.

        last time job was evaluated for scheduling  # noqa: E501

        :param last_sched_evaluation: The last_sched_evaluation of this V0038JobResponseProperties.
        :type last_sched_evaluation: int
        """

        self._last_sched_evaluation = last_sched_evaluation

    @property
    def licenses(self) -> str:
        """Gets the licenses of this V0038JobResponseProperties.

        licenses required by the job  # noqa: E501

        :return: The licenses of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._licenses

    @licenses.setter
    def licenses(self, licenses: str):
        """Sets the licenses of this V0038JobResponseProperties.

        licenses required by the job  # noqa: E501

        :param licenses: The licenses of this V0038JobResponseProperties.
        :type licenses: str
        """

        self._licenses = licenses

    @property
    def max_cpus(self) -> int:
        """Gets the max_cpus of this V0038JobResponseProperties.

        maximum number of cpus usable by job  # noqa: E501

        :return: The max_cpus of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._max_cpus

    @max_cpus.setter
    def max_cpus(self, max_cpus: int):
        """Sets the max_cpus of this V0038JobResponseProperties.

        maximum number of cpus usable by job  # noqa: E501

        :param max_cpus: The max_cpus of this V0038JobResponseProperties.
        :type max_cpus: int
        """

        self._max_cpus = max_cpus

    @property
    def max_nodes(self) -> int:
        """Gets the max_nodes of this V0038JobResponseProperties.

        maximum number of nodes usable by job  # noqa: E501

        :return: The max_nodes of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._max_nodes

    @max_nodes.setter
    def max_nodes(self, max_nodes: int):
        """Sets the max_nodes of this V0038JobResponseProperties.

        maximum number of nodes usable by job  # noqa: E501

        :param max_nodes: The max_nodes of this V0038JobResponseProperties.
        :type max_nodes: int
        """

        self._max_nodes = max_nodes

    @property
    def mcs_label(self) -> str:
        """Gets the mcs_label of this V0038JobResponseProperties.

        mcs_label if mcs plugin in use  # noqa: E501

        :return: The mcs_label of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._mcs_label

    @mcs_label.setter
    def mcs_label(self, mcs_label: str):
        """Sets the mcs_label of this V0038JobResponseProperties.

        mcs_label if mcs plugin in use  # noqa: E501

        :param mcs_label: The mcs_label of this V0038JobResponseProperties.
        :type mcs_label: str
        """

        self._mcs_label = mcs_label

    @property
    def memory_per_tres(self) -> str:
        """Gets the memory_per_tres of this V0038JobResponseProperties.

        semicolon delimited list of TRES=# values  # noqa: E501

        :return: The memory_per_tres of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._memory_per_tres

    @memory_per_tres.setter
    def memory_per_tres(self, memory_per_tres: str):
        """Sets the memory_per_tres of this V0038JobResponseProperties.

        semicolon delimited list of TRES=# values  # noqa: E501

        :param memory_per_tres: The memory_per_tres of this V0038JobResponseProperties.
        :type memory_per_tres: str
        """

        self._memory_per_tres = memory_per_tres

    @property
    def name(self) -> str:
        """Gets the name of this V0038JobResponseProperties.

        name of the job  # noqa: E501

        :return: The name of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this V0038JobResponseProperties.

        name of the job  # noqa: E501

        :param name: The name of this V0038JobResponseProperties.
        :type name: str
        """

        self._name = name

    @property
    def nodes(self) -> str:
        """Gets the nodes of this V0038JobResponseProperties.

        list of nodes allocated to job  # noqa: E501

        :return: The nodes of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes: str):
        """Sets the nodes of this V0038JobResponseProperties.

        list of nodes allocated to job  # noqa: E501

        :param nodes: The nodes of this V0038JobResponseProperties.
        :type nodes: str
        """

        self._nodes = nodes

    @property
    def nice(self) -> int:
        """Gets the nice of this V0038JobResponseProperties.

        requested priority change  # noqa: E501

        :return: The nice of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._nice

    @nice.setter
    def nice(self, nice: int):
        """Sets the nice of this V0038JobResponseProperties.

        requested priority change  # noqa: E501

        :param nice: The nice of this V0038JobResponseProperties.
        :type nice: int
        """

        self._nice = nice

    @property
    def tasks_per_core(self) -> int:
        """Gets the tasks_per_core of this V0038JobResponseProperties.

        number of tasks to invoke on each core  # noqa: E501

        :return: The tasks_per_core of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._tasks_per_core

    @tasks_per_core.setter
    def tasks_per_core(self, tasks_per_core: int):
        """Sets the tasks_per_core of this V0038JobResponseProperties.

        number of tasks to invoke on each core  # noqa: E501

        :param tasks_per_core: The tasks_per_core of this V0038JobResponseProperties.
        :type tasks_per_core: int
        """

        self._tasks_per_core = tasks_per_core

    @property
    def tasks_per_socket(self) -> int:
        """Gets the tasks_per_socket of this V0038JobResponseProperties.

        number of tasks to invoke on each socket  # noqa: E501

        :return: The tasks_per_socket of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._tasks_per_socket

    @tasks_per_socket.setter
    def tasks_per_socket(self, tasks_per_socket: int):
        """Sets the tasks_per_socket of this V0038JobResponseProperties.

        number of tasks to invoke on each socket  # noqa: E501

        :param tasks_per_socket: The tasks_per_socket of this V0038JobResponseProperties.
        :type tasks_per_socket: int
        """

        self._tasks_per_socket = tasks_per_socket

    @property
    def tasks_per_board(self) -> int:
        """Gets the tasks_per_board of this V0038JobResponseProperties.

        number of tasks to invoke on each board  # noqa: E501

        :return: The tasks_per_board of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._tasks_per_board

    @tasks_per_board.setter
    def tasks_per_board(self, tasks_per_board: int):
        """Sets the tasks_per_board of this V0038JobResponseProperties.

        number of tasks to invoke on each board  # noqa: E501

        :param tasks_per_board: The tasks_per_board of this V0038JobResponseProperties.
        :type tasks_per_board: int
        """

        self._tasks_per_board = tasks_per_board

    @property
    def cpus(self) -> int:
        """Gets the cpus of this V0038JobResponseProperties.

        minimum number of cpus required by job  # noqa: E501

        :return: The cpus of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._cpus

    @cpus.setter
    def cpus(self, cpus: int):
        """Sets the cpus of this V0038JobResponseProperties.

        minimum number of cpus required by job  # noqa: E501

        :param cpus: The cpus of this V0038JobResponseProperties.
        :type cpus: int
        """

        self._cpus = cpus

    @property
    def node_count(self) -> int:
        """Gets the node_count of this V0038JobResponseProperties.

        minimum number of nodes required by job  # noqa: E501

        :return: The node_count of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._node_count

    @node_count.setter
    def node_count(self, node_count: int):
        """Sets the node_count of this V0038JobResponseProperties.

        minimum number of nodes required by job  # noqa: E501

        :param node_count: The node_count of this V0038JobResponseProperties.
        :type node_count: int
        """

        self._node_count = node_count

    @property
    def tasks(self) -> int:
        """Gets the tasks of this V0038JobResponseProperties.

        requested task count  # noqa: E501

        :return: The tasks of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks: int):
        """Sets the tasks of this V0038JobResponseProperties.

        requested task count  # noqa: E501

        :param tasks: The tasks of this V0038JobResponseProperties.
        :type tasks: int
        """

        self._tasks = tasks

    @property
    def het_job_id(self) -> int:
        """Gets the het_job_id of this V0038JobResponseProperties.

        job ID of hetjob leader  # noqa: E501

        :return: The het_job_id of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._het_job_id

    @het_job_id.setter
    def het_job_id(self, het_job_id: int):
        """Sets the het_job_id of this V0038JobResponseProperties.

        job ID of hetjob leader  # noqa: E501

        :param het_job_id: The het_job_id of this V0038JobResponseProperties.
        :type het_job_id: int
        """

        self._het_job_id = het_job_id

    @property
    def het_job_id_set(self) -> str:
        """Gets the het_job_id_set of this V0038JobResponseProperties.

        job IDs for all components  # noqa: E501

        :return: The het_job_id_set of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._het_job_id_set

    @het_job_id_set.setter
    def het_job_id_set(self, het_job_id_set: str):
        """Sets the het_job_id_set of this V0038JobResponseProperties.

        job IDs for all components  # noqa: E501

        :param het_job_id_set: The het_job_id_set of this V0038JobResponseProperties.
        :type het_job_id_set: str
        """

        self._het_job_id_set = het_job_id_set

    @property
    def het_job_offset(self) -> int:
        """Gets the het_job_offset of this V0038JobResponseProperties.

        HetJob component offset from leader  # noqa: E501

        :return: The het_job_offset of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._het_job_offset

    @het_job_offset.setter
    def het_job_offset(self, het_job_offset: int):
        """Sets the het_job_offset of this V0038JobResponseProperties.

        HetJob component offset from leader  # noqa: E501

        :param het_job_offset: The het_job_offset of this V0038JobResponseProperties.
        :type het_job_offset: int
        """

        self._het_job_offset = het_job_offset

    @property
    def partition(self) -> str:
        """Gets the partition of this V0038JobResponseProperties.

        name of assigned partition  # noqa: E501

        :return: The partition of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._partition

    @partition.setter
    def partition(self, partition: str):
        """Sets the partition of this V0038JobResponseProperties.

        name of assigned partition  # noqa: E501

        :param partition: The partition of this V0038JobResponseProperties.
        :type partition: str
        """

        self._partition = partition

    @property
    def memory_per_node(self) -> int:
        """Gets the memory_per_node of this V0038JobResponseProperties.

        minimum real memory per node  # noqa: E501

        :return: The memory_per_node of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._memory_per_node

    @memory_per_node.setter
    def memory_per_node(self, memory_per_node: int):
        """Sets the memory_per_node of this V0038JobResponseProperties.

        minimum real memory per node  # noqa: E501

        :param memory_per_node: The memory_per_node of this V0038JobResponseProperties.
        :type memory_per_node: int
        """

        self._memory_per_node = memory_per_node

    @property
    def memory_per_cpu(self) -> int:
        """Gets the memory_per_cpu of this V0038JobResponseProperties.

        minimum real memory per cpu  # noqa: E501

        :return: The memory_per_cpu of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._memory_per_cpu

    @memory_per_cpu.setter
    def memory_per_cpu(self, memory_per_cpu: int):
        """Sets the memory_per_cpu of this V0038JobResponseProperties.

        minimum real memory per cpu  # noqa: E501

        :param memory_per_cpu: The memory_per_cpu of this V0038JobResponseProperties.
        :type memory_per_cpu: int
        """

        self._memory_per_cpu = memory_per_cpu

    @property
    def minimum_cpus_per_node(self) -> int:
        """Gets the minimum_cpus_per_node of this V0038JobResponseProperties.

        minimum # CPUs per node  # noqa: E501

        :return: The minimum_cpus_per_node of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._minimum_cpus_per_node

    @minimum_cpus_per_node.setter
    def minimum_cpus_per_node(self, minimum_cpus_per_node: int):
        """Sets the minimum_cpus_per_node of this V0038JobResponseProperties.

        minimum # CPUs per node  # noqa: E501

        :param minimum_cpus_per_node: The minimum_cpus_per_node of this V0038JobResponseProperties.
        :type minimum_cpus_per_node: int
        """

        self._minimum_cpus_per_node = minimum_cpus_per_node

    @property
    def minimum_tmp_disk_per_node(self) -> int:
        """Gets the minimum_tmp_disk_per_node of this V0038JobResponseProperties.

        minimum tmp disk per node  # noqa: E501

        :return: The minimum_tmp_disk_per_node of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._minimum_tmp_disk_per_node

    @minimum_tmp_disk_per_node.setter
    def minimum_tmp_disk_per_node(self, minimum_tmp_disk_per_node: int):
        """Sets the minimum_tmp_disk_per_node of this V0038JobResponseProperties.

        minimum tmp disk per node  # noqa: E501

        :param minimum_tmp_disk_per_node: The minimum_tmp_disk_per_node of this V0038JobResponseProperties.
        :type minimum_tmp_disk_per_node: int
        """

        self._minimum_tmp_disk_per_node = minimum_tmp_disk_per_node

    @property
    def preempt_time(self) -> int:
        """Gets the preempt_time of this V0038JobResponseProperties.

        preemption signal time  # noqa: E501

        :return: The preempt_time of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._preempt_time

    @preempt_time.setter
    def preempt_time(self, preempt_time: int):
        """Sets the preempt_time of this V0038JobResponseProperties.

        preemption signal time  # noqa: E501

        :param preempt_time: The preempt_time of this V0038JobResponseProperties.
        :type preempt_time: int
        """

        self._preempt_time = preempt_time

    @property
    def pre_sus_time(self) -> int:
        """Gets the pre_sus_time of this V0038JobResponseProperties.

        time job ran prior to last suspend  # noqa: E501

        :return: The pre_sus_time of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._pre_sus_time

    @pre_sus_time.setter
    def pre_sus_time(self, pre_sus_time: int):
        """Sets the pre_sus_time of this V0038JobResponseProperties.

        time job ran prior to last suspend  # noqa: E501

        :param pre_sus_time: The pre_sus_time of this V0038JobResponseProperties.
        :type pre_sus_time: int
        """

        self._pre_sus_time = pre_sus_time

    @property
    def priority(self) -> int:
        """Gets the priority of this V0038JobResponseProperties.

        relative priority of the job  # noqa: E501

        :return: The priority of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority: int):
        """Sets the priority of this V0038JobResponseProperties.

        relative priority of the job  # noqa: E501

        :param priority: The priority of this V0038JobResponseProperties.
        :type priority: int
        """

        self._priority = priority

    @property
    def profile(self) -> List[str]:
        """Gets the profile of this V0038JobResponseProperties.

        Job profiling requested  # noqa: E501

        :return: The profile of this V0038JobResponseProperties.
        :rtype: List[str]
        """
        return self._profile

    @profile.setter
    def profile(self, profile: List[str]):
        """Sets the profile of this V0038JobResponseProperties.

        Job profiling requested  # noqa: E501

        :param profile: The profile of this V0038JobResponseProperties.
        :type profile: List[str]
        """

        self._profile = profile

    @property
    def qos(self) -> str:
        """Gets the qos of this V0038JobResponseProperties.

        Quality of Service  # noqa: E501

        :return: The qos of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._qos

    @qos.setter
    def qos(self, qos: str):
        """Sets the qos of this V0038JobResponseProperties.

        Quality of Service  # noqa: E501

        :param qos: The qos of this V0038JobResponseProperties.
        :type qos: str
        """

        self._qos = qos

    @property
    def reboot(self) -> bool:
        """Gets the reboot of this V0038JobResponseProperties.

        node reboot requested before start  # noqa: E501

        :return: The reboot of this V0038JobResponseProperties.
        :rtype: bool
        """
        return self._reboot

    @reboot.setter
    def reboot(self, reboot: bool):
        """Sets the reboot of this V0038JobResponseProperties.

        node reboot requested before start  # noqa: E501

        :param reboot: The reboot of this V0038JobResponseProperties.
        :type reboot: bool
        """

        self._reboot = reboot

    @property
    def required_nodes(self) -> str:
        """Gets the required_nodes of this V0038JobResponseProperties.

        comma separated list of required nodes  # noqa: E501

        :return: The required_nodes of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._required_nodes

    @required_nodes.setter
    def required_nodes(self, required_nodes: str):
        """Sets the required_nodes of this V0038JobResponseProperties.

        comma separated list of required nodes  # noqa: E501

        :param required_nodes: The required_nodes of this V0038JobResponseProperties.
        :type required_nodes: str
        """

        self._required_nodes = required_nodes

    @property
    def requeue(self) -> bool:
        """Gets the requeue of this V0038JobResponseProperties.

        enable or disable job requeue option  # noqa: E501

        :return: The requeue of this V0038JobResponseProperties.
        :rtype: bool
        """
        return self._requeue

    @requeue.setter
    def requeue(self, requeue: bool):
        """Sets the requeue of this V0038JobResponseProperties.

        enable or disable job requeue option  # noqa: E501

        :param requeue: The requeue of this V0038JobResponseProperties.
        :type requeue: bool
        """

        self._requeue = requeue

    @property
    def resize_time(self) -> int:
        """Gets the resize_time of this V0038JobResponseProperties.

        time of latest size change  # noqa: E501

        :return: The resize_time of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._resize_time

    @resize_time.setter
    def resize_time(self, resize_time: int):
        """Sets the resize_time of this V0038JobResponseProperties.

        time of latest size change  # noqa: E501

        :param resize_time: The resize_time of this V0038JobResponseProperties.
        :type resize_time: int
        """

        self._resize_time = resize_time

    @property
    def restart_cnt(self) -> int:
        """Gets the restart_cnt of this V0038JobResponseProperties.

        count of job restarts  # noqa: E501

        :return: The restart_cnt of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._restart_cnt

    @restart_cnt.setter
    def restart_cnt(self, restart_cnt: int):
        """Sets the restart_cnt of this V0038JobResponseProperties.

        count of job restarts  # noqa: E501

        :param restart_cnt: The restart_cnt of this V0038JobResponseProperties.
        :type restart_cnt: int
        """

        self._restart_cnt = restart_cnt

    @property
    def resv_name(self) -> str:
        """Gets the resv_name of this V0038JobResponseProperties.

        reservation name  # noqa: E501

        :return: The resv_name of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._resv_name

    @resv_name.setter
    def resv_name(self, resv_name: str):
        """Sets the resv_name of this V0038JobResponseProperties.

        reservation name  # noqa: E501

        :param resv_name: The resv_name of this V0038JobResponseProperties.
        :type resv_name: str
        """

        self._resv_name = resv_name

    @property
    def shared(self) -> str:
        """Gets the shared of this V0038JobResponseProperties.

        type and if job can share nodes with other jobs  # noqa: E501

        :return: The shared of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._shared

    @shared.setter
    def shared(self, shared: str):
        """Sets the shared of this V0038JobResponseProperties.

        type and if job can share nodes with other jobs  # noqa: E501

        :param shared: The shared of this V0038JobResponseProperties.
        :type shared: str
        """

        self._shared = shared

    @property
    def show_flags(self) -> List[str]:
        """Gets the show_flags of this V0038JobResponseProperties.

        details requested  # noqa: E501

        :return: The show_flags of this V0038JobResponseProperties.
        :rtype: List[str]
        """
        return self._show_flags

    @show_flags.setter
    def show_flags(self, show_flags: List[str]):
        """Sets the show_flags of this V0038JobResponseProperties.

        details requested  # noqa: E501

        :param show_flags: The show_flags of this V0038JobResponseProperties.
        :type show_flags: List[str]
        """

        self._show_flags = show_flags

    @property
    def sockets_per_board(self) -> int:
        """Gets the sockets_per_board of this V0038JobResponseProperties.

        sockets per board required by job  # noqa: E501

        :return: The sockets_per_board of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._sockets_per_board

    @sockets_per_board.setter
    def sockets_per_board(self, sockets_per_board: int):
        """Sets the sockets_per_board of this V0038JobResponseProperties.

        sockets per board required by job  # noqa: E501

        :param sockets_per_board: The sockets_per_board of this V0038JobResponseProperties.
        :type sockets_per_board: int
        """

        self._sockets_per_board = sockets_per_board

    @property
    def sockets_per_node(self) -> int:
        """Gets the sockets_per_node of this V0038JobResponseProperties.

        sockets per node required by job  # noqa: E501

        :return: The sockets_per_node of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._sockets_per_node

    @sockets_per_node.setter
    def sockets_per_node(self, sockets_per_node: int):
        """Sets the sockets_per_node of this V0038JobResponseProperties.

        sockets per node required by job  # noqa: E501

        :param sockets_per_node: The sockets_per_node of this V0038JobResponseProperties.
        :type sockets_per_node: int
        """

        self._sockets_per_node = sockets_per_node

    @property
    def start_time(self) -> int:
        """Gets the start_time of this V0038JobResponseProperties.

        time execution begins, actual or expected  # noqa: E501

        :return: The start_time of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time: int):
        """Sets the start_time of this V0038JobResponseProperties.

        time execution begins, actual or expected  # noqa: E501

        :param start_time: The start_time of this V0038JobResponseProperties.
        :type start_time: int
        """

        self._start_time = start_time

    @property
    def state_description(self) -> str:
        """Gets the state_description of this V0038JobResponseProperties.

        optional details for state_reason  # noqa: E501

        :return: The state_description of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._state_description

    @state_description.setter
    def state_description(self, state_description: str):
        """Sets the state_description of this V0038JobResponseProperties.

        optional details for state_reason  # noqa: E501

        :param state_description: The state_description of this V0038JobResponseProperties.
        :type state_description: str
        """

        self._state_description = state_description

    @property
    def state_reason(self) -> str:
        """Gets the state_reason of this V0038JobResponseProperties.

        reason job still pending or failed  # noqa: E501

        :return: The state_reason of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._state_reason

    @state_reason.setter
    def state_reason(self, state_reason: str):
        """Sets the state_reason of this V0038JobResponseProperties.

        reason job still pending or failed  # noqa: E501

        :param state_reason: The state_reason of this V0038JobResponseProperties.
        :type state_reason: str
        """

        self._state_reason = state_reason

    @property
    def standard_error(self) -> str:
        """Gets the standard_error of this V0038JobResponseProperties.

        pathname of job's stderr file  # noqa: E501

        :return: The standard_error of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._standard_error

    @standard_error.setter
    def standard_error(self, standard_error: str):
        """Sets the standard_error of this V0038JobResponseProperties.

        pathname of job's stderr file  # noqa: E501

        :param standard_error: The standard_error of this V0038JobResponseProperties.
        :type standard_error: str
        """

        self._standard_error = standard_error

    @property
    def standard_input(self) -> str:
        """Gets the standard_input of this V0038JobResponseProperties.

        pathname of job's stdin file  # noqa: E501

        :return: The standard_input of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._standard_input

    @standard_input.setter
    def standard_input(self, standard_input: str):
        """Sets the standard_input of this V0038JobResponseProperties.

        pathname of job's stdin file  # noqa: E501

        :param standard_input: The standard_input of this V0038JobResponseProperties.
        :type standard_input: str
        """

        self._standard_input = standard_input

    @property
    def standard_output(self) -> str:
        """Gets the standard_output of this V0038JobResponseProperties.

        pathname of job's stdout file  # noqa: E501

        :return: The standard_output of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._standard_output

    @standard_output.setter
    def standard_output(self, standard_output: str):
        """Sets the standard_output of this V0038JobResponseProperties.

        pathname of job's stdout file  # noqa: E501

        :param standard_output: The standard_output of this V0038JobResponseProperties.
        :type standard_output: str
        """

        self._standard_output = standard_output

    @property
    def submit_time(self) -> int:
        """Gets the submit_time of this V0038JobResponseProperties.

        time of job submission  # noqa: E501

        :return: The submit_time of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._submit_time

    @submit_time.setter
    def submit_time(self, submit_time: int):
        """Sets the submit_time of this V0038JobResponseProperties.

        time of job submission  # noqa: E501

        :param submit_time: The submit_time of this V0038JobResponseProperties.
        :type submit_time: int
        """

        self._submit_time = submit_time

    @property
    def suspend_time(self) -> int:
        """Gets the suspend_time of this V0038JobResponseProperties.

        time job last suspended or resumed  # noqa: E501

        :return: The suspend_time of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._suspend_time

    @suspend_time.setter
    def suspend_time(self, suspend_time: int):
        """Sets the suspend_time of this V0038JobResponseProperties.

        time job last suspended or resumed  # noqa: E501

        :param suspend_time: The suspend_time of this V0038JobResponseProperties.
        :type suspend_time: int
        """

        self._suspend_time = suspend_time

    @property
    def system_comment(self) -> str:
        """Gets the system_comment of this V0038JobResponseProperties.

        slurmctld's arbitrary comment  # noqa: E501

        :return: The system_comment of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._system_comment

    @system_comment.setter
    def system_comment(self, system_comment: str):
        """Sets the system_comment of this V0038JobResponseProperties.

        slurmctld's arbitrary comment  # noqa: E501

        :param system_comment: The system_comment of this V0038JobResponseProperties.
        :type system_comment: str
        """

        self._system_comment = system_comment

    @property
    def time_limit(self) -> int:
        """Gets the time_limit of this V0038JobResponseProperties.

        maximum run time in minutes  # noqa: E501

        :return: The time_limit of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._time_limit

    @time_limit.setter
    def time_limit(self, time_limit: int):
        """Sets the time_limit of this V0038JobResponseProperties.

        maximum run time in minutes  # noqa: E501

        :param time_limit: The time_limit of this V0038JobResponseProperties.
        :type time_limit: int
        """

        self._time_limit = time_limit

    @property
    def time_minimum(self) -> int:
        """Gets the time_minimum of this V0038JobResponseProperties.

        minimum run time in minutes  # noqa: E501

        :return: The time_minimum of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._time_minimum

    @time_minimum.setter
    def time_minimum(self, time_minimum: int):
        """Sets the time_minimum of this V0038JobResponseProperties.

        minimum run time in minutes  # noqa: E501

        :param time_minimum: The time_minimum of this V0038JobResponseProperties.
        :type time_minimum: int
        """

        self._time_minimum = time_minimum

    @property
    def threads_per_core(self) -> int:
        """Gets the threads_per_core of this V0038JobResponseProperties.

        threads per core required by job  # noqa: E501

        :return: The threads_per_core of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._threads_per_core

    @threads_per_core.setter
    def threads_per_core(self, threads_per_core: int):
        """Sets the threads_per_core of this V0038JobResponseProperties.

        threads per core required by job  # noqa: E501

        :param threads_per_core: The threads_per_core of this V0038JobResponseProperties.
        :type threads_per_core: int
        """

        self._threads_per_core = threads_per_core

    @property
    def tres_bind(self) -> str:
        """Gets the tres_bind of this V0038JobResponseProperties.

        Task to TRES binding directives  # noqa: E501

        :return: The tres_bind of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._tres_bind

    @tres_bind.setter
    def tres_bind(self, tres_bind: str):
        """Sets the tres_bind of this V0038JobResponseProperties.

        Task to TRES binding directives  # noqa: E501

        :param tres_bind: The tres_bind of this V0038JobResponseProperties.
        :type tres_bind: str
        """

        self._tres_bind = tres_bind

    @property
    def tres_freq(self) -> str:
        """Gets the tres_freq of this V0038JobResponseProperties.

        TRES frequency directives  # noqa: E501

        :return: The tres_freq of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._tres_freq

    @tres_freq.setter
    def tres_freq(self, tres_freq: str):
        """Sets the tres_freq of this V0038JobResponseProperties.

        TRES frequency directives  # noqa: E501

        :param tres_freq: The tres_freq of this V0038JobResponseProperties.
        :type tres_freq: str
        """

        self._tres_freq = tres_freq

    @property
    def tres_per_job(self) -> str:
        """Gets the tres_per_job of this V0038JobResponseProperties.

        semicolon delimited list of TRES=# values  # noqa: E501

        :return: The tres_per_job of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._tres_per_job

    @tres_per_job.setter
    def tres_per_job(self, tres_per_job: str):
        """Sets the tres_per_job of this V0038JobResponseProperties.

        semicolon delimited list of TRES=# values  # noqa: E501

        :param tres_per_job: The tres_per_job of this V0038JobResponseProperties.
        :type tres_per_job: str
        """

        self._tres_per_job = tres_per_job

    @property
    def tres_per_node(self) -> str:
        """Gets the tres_per_node of this V0038JobResponseProperties.

        semicolon delimited list of TRES=# values  # noqa: E501

        :return: The tres_per_node of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._tres_per_node

    @tres_per_node.setter
    def tres_per_node(self, tres_per_node: str):
        """Sets the tres_per_node of this V0038JobResponseProperties.

        semicolon delimited list of TRES=# values  # noqa: E501

        :param tres_per_node: The tres_per_node of this V0038JobResponseProperties.
        :type tres_per_node: str
        """

        self._tres_per_node = tres_per_node

    @property
    def tres_per_socket(self) -> str:
        """Gets the tres_per_socket of this V0038JobResponseProperties.

        semicolon delimited list of TRES=# values  # noqa: E501

        :return: The tres_per_socket of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._tres_per_socket

    @tres_per_socket.setter
    def tres_per_socket(self, tres_per_socket: str):
        """Sets the tres_per_socket of this V0038JobResponseProperties.

        semicolon delimited list of TRES=# values  # noqa: E501

        :param tres_per_socket: The tres_per_socket of this V0038JobResponseProperties.
        :type tres_per_socket: str
        """

        self._tres_per_socket = tres_per_socket

    @property
    def tres_per_task(self) -> str:
        """Gets the tres_per_task of this V0038JobResponseProperties.

        semicolon delimited list of TRES=# values  # noqa: E501

        :return: The tres_per_task of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._tres_per_task

    @tres_per_task.setter
    def tres_per_task(self, tres_per_task: str):
        """Sets the tres_per_task of this V0038JobResponseProperties.

        semicolon delimited list of TRES=# values  # noqa: E501

        :param tres_per_task: The tres_per_task of this V0038JobResponseProperties.
        :type tres_per_task: str
        """

        self._tres_per_task = tres_per_task

    @property
    def tres_req_str(self) -> str:
        """Gets the tres_req_str of this V0038JobResponseProperties.

        tres reqeusted in the job  # noqa: E501

        :return: The tres_req_str of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._tres_req_str

    @tres_req_str.setter
    def tres_req_str(self, tres_req_str: str):
        """Sets the tres_req_str of this V0038JobResponseProperties.

        tres reqeusted in the job  # noqa: E501

        :param tres_req_str: The tres_req_str of this V0038JobResponseProperties.
        :type tres_req_str: str
        """

        self._tres_req_str = tres_req_str

    @property
    def tres_alloc_str(self) -> str:
        """Gets the tres_alloc_str of this V0038JobResponseProperties.

        tres used in the job  # noqa: E501

        :return: The tres_alloc_str of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._tres_alloc_str

    @tres_alloc_str.setter
    def tres_alloc_str(self, tres_alloc_str: str):
        """Sets the tres_alloc_str of this V0038JobResponseProperties.

        tres used in the job  # noqa: E501

        :param tres_alloc_str: The tres_alloc_str of this V0038JobResponseProperties.
        :type tres_alloc_str: str
        """

        self._tres_alloc_str = tres_alloc_str

    @property
    def user_id(self) -> int:
        """Gets the user_id of this V0038JobResponseProperties.

        user id the job runs as  # noqa: E501

        :return: The user_id of this V0038JobResponseProperties.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: int):
        """Sets the user_id of this V0038JobResponseProperties.

        user id the job runs as  # noqa: E501

        :param user_id: The user_id of this V0038JobResponseProperties.
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def user_name(self) -> str:
        """Gets the user_name of this V0038JobResponseProperties.

        user the job runs as  # noqa: E501

        :return: The user_name of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name: str):
        """Sets the user_name of this V0038JobResponseProperties.

        user the job runs as  # noqa: E501

        :param user_name: The user_name of this V0038JobResponseProperties.
        :type user_name: str
        """

        self._user_name = user_name

    @property
    def wckey(self) -> str:
        """Gets the wckey of this V0038JobResponseProperties.

        wckey for job  # noqa: E501

        :return: The wckey of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._wckey

    @wckey.setter
    def wckey(self, wckey: str):
        """Sets the wckey of this V0038JobResponseProperties.

        wckey for job  # noqa: E501

        :param wckey: The wckey of this V0038JobResponseProperties.
        :type wckey: str
        """

        self._wckey = wckey

    @property
    def current_working_directory(self) -> str:
        """Gets the current_working_directory of this V0038JobResponseProperties.

        pathname of working directory  # noqa: E501

        :return: The current_working_directory of this V0038JobResponseProperties.
        :rtype: str
        """
        return self._current_working_directory

    @current_working_directory.setter
    def current_working_directory(self, current_working_directory: str):
        """Sets the current_working_directory of this V0038JobResponseProperties.

        pathname of working directory  # noqa: E501

        :param current_working_directory: The current_working_directory of this V0038JobResponseProperties.
        :type current_working_directory: str
        """

        self._current_working_directory = current_working_directory
