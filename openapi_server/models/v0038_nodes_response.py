from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.v0038_error import V0038Error
from openapi_server.models.v0038_meta import V0038Meta
from openapi_server.models.v0038_node import V0038Node
from openapi_server import util

from openapi_server.models.v0038_error import V0038Error  # noqa: E501
from openapi_server.models.v0038_meta import V0038Meta  # noqa: E501
from openapi_server.models.v0038_node import V0038Node  # noqa: E501

class V0038NodesResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, meta=None, errors=None, nodes=None):  # noqa: E501
        """V0038NodesResponse - a model defined in OpenAPI

        :param meta: The meta of this V0038NodesResponse.  # noqa: E501
        :type meta: V0038Meta
        :param errors: The errors of this V0038NodesResponse.  # noqa: E501
        :type errors: List[V0038Error]
        :param nodes: The nodes of this V0038NodesResponse.  # noqa: E501
        :type nodes: List[V0038Node]
        """
        self.openapi_types = {
            'meta': V0038Meta,
            'errors': List[V0038Error],
            'nodes': List[V0038Node]
        }

        self.attribute_map = {
            'meta': 'meta',
            'errors': 'errors',
            'nodes': 'nodes'
        }

        self._meta = meta
        self._errors = errors
        self._nodes = nodes

    @classmethod
    def from_dict(cls, dikt) -> 'V0038NodesResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The v0.0.38_nodes_response of this V0038NodesResponse.  # noqa: E501
        :rtype: V0038NodesResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def meta(self) -> V0038Meta:
        """Gets the meta of this V0038NodesResponse.


        :return: The meta of this V0038NodesResponse.
        :rtype: V0038Meta
        """
        return self._meta

    @meta.setter
    def meta(self, meta: V0038Meta):
        """Sets the meta of this V0038NodesResponse.


        :param meta: The meta of this V0038NodesResponse.
        :type meta: V0038Meta
        """

        self._meta = meta

    @property
    def errors(self) -> List[V0038Error]:
        """Gets the errors of this V0038NodesResponse.

        slurm errors  # noqa: E501

        :return: The errors of this V0038NodesResponse.
        :rtype: List[V0038Error]
        """
        return self._errors

    @errors.setter
    def errors(self, errors: List[V0038Error]):
        """Sets the errors of this V0038NodesResponse.

        slurm errors  # noqa: E501

        :param errors: The errors of this V0038NodesResponse.
        :type errors: List[V0038Error]
        """

        self._errors = errors

    @property
    def nodes(self) -> List[V0038Node]:
        """Gets the nodes of this V0038NodesResponse.

        nodes info  # noqa: E501

        :return: The nodes of this V0038NodesResponse.
        :rtype: List[V0038Node]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes: List[V0038Node]):
        """Sets the nodes of this V0038NodesResponse.

        nodes info  # noqa: E501

        :param nodes: The nodes of this V0038NodesResponse.
        :type nodes: List[V0038Node]
        """

        self._nodes = nodes
