from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class V0038License(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, license_name=None, total=None, used=None, free=None, reserved=None, remote=None):  # noqa: E501
        """V0038License - a model defined in OpenAPI

        :param license_name: The license_name of this V0038License.  # noqa: E501
        :type license_name: str
        :param total: The total of this V0038License.  # noqa: E501
        :type total: int
        :param used: The used of this V0038License.  # noqa: E501
        :type used: int
        :param free: The free of this V0038License.  # noqa: E501
        :type free: int
        :param reserved: The reserved of this V0038License.  # noqa: E501
        :type reserved: int
        :param remote: The remote of this V0038License.  # noqa: E501
        :type remote: bool
        """
        self.openapi_types = {
            'license_name': str,
            'total': int,
            'used': int,
            'free': int,
            'reserved': int,
            'remote': bool
        }

        self.attribute_map = {
            'license_name': 'LicenseName',
            'total': 'Total',
            'used': 'Used',
            'free': 'Free',
            'reserved': 'Reserved',
            'remote': 'Remote'
        }

        self._license_name = license_name
        self._total = total
        self._used = used
        self._free = free
        self._reserved = reserved
        self._remote = remote

    @classmethod
    def from_dict(cls, dikt) -> 'V0038License':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The v0.0.38_license of this V0038License.  # noqa: E501
        :rtype: V0038License
        """
        return util.deserialize_model(dikt, cls)

    @property
    def license_name(self) -> str:
        """Gets the license_name of this V0038License.

        name of license  # noqa: E501

        :return: The license_name of this V0038License.
        :rtype: str
        """
        return self._license_name

    @license_name.setter
    def license_name(self, license_name: str):
        """Sets the license_name of this V0038License.

        name of license  # noqa: E501

        :param license_name: The license_name of this V0038License.
        :type license_name: str
        """

        self._license_name = license_name

    @property
    def total(self) -> int:
        """Gets the total of this V0038License.

        total number of licenses  # noqa: E501

        :return: The total of this V0038License.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total: int):
        """Sets the total of this V0038License.

        total number of licenses  # noqa: E501

        :param total: The total of this V0038License.
        :type total: int
        """

        self._total = total

    @property
    def used(self) -> int:
        """Gets the used of this V0038License.

        number of licenses in use  # noqa: E501

        :return: The used of this V0038License.
        :rtype: int
        """
        return self._used

    @used.setter
    def used(self, used: int):
        """Sets the used of this V0038License.

        number of licenses in use  # noqa: E501

        :param used: The used of this V0038License.
        :type used: int
        """

        self._used = used

    @property
    def free(self) -> int:
        """Gets the free of this V0038License.

        number of licenses available  # noqa: E501

        :return: The free of this V0038License.
        :rtype: int
        """
        return self._free

    @free.setter
    def free(self, free: int):
        """Sets the free of this V0038License.

        number of licenses available  # noqa: E501

        :param free: The free of this V0038License.
        :type free: int
        """

        self._free = free

    @property
    def reserved(self) -> int:
        """Gets the reserved of this V0038License.

        number of licenses reserved  # noqa: E501

        :return: The reserved of this V0038License.
        :rtype: int
        """
        return self._reserved

    @reserved.setter
    def reserved(self, reserved: int):
        """Sets the reserved of this V0038License.

        number of licenses reserved  # noqa: E501

        :param reserved: The reserved of this V0038License.
        :type reserved: int
        """

        self._reserved = reserved

    @property
    def remote(self) -> bool:
        """Gets the remote of this V0038License.

        license is remote  # noqa: E501

        :return: The remote of this V0038License.
        :rtype: bool
        """
        return self._remote

    @remote.setter
    def remote(self, remote: bool):
        """Sets the remote of this V0038License.

        license is remote  # noqa: E501

        :param remote: The remote of this V0038License.
        :type remote: bool
        """

        self._remote = remote
