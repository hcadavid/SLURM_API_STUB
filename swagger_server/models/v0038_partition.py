# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class V0038Partition(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, flags: List[str]=None, preemption_mode: List[str]=None, allowed_allocation_nodes: str=None, allowed_accounts: str=None, allowed_groups: str=None, allowed_qos: str=None, alternative: str=None, billing_weights: str=None, default_memory_per_cpu: int=None, default_time_limit: int=None, denied_accounts: str=None, denied_qos: str=None, preemption_grace_time: int=None, maximum_cpus_per_node: int=None, maximum_memory_per_node: int=None, maximum_nodes_per_job: int=None, max_time_limit: int=None, min_nodes_per_job: int=None, name: str=None, nodes: str=None, over_time_limit: int=None, priority_job_factor: int=None, priority_tier: int=None, qos: str=None, state: str=None, total_cpus: int=None, total_nodes: int=None, tres: str=None, maximum_memory_per_cpu: int=None, default_memory_per_node: int=None):  # noqa: E501
        """V0038Partition - a model defined in Swagger

        :param flags: The flags of this V0038Partition.  # noqa: E501
        :type flags: List[str]
        :param preemption_mode: The preemption_mode of this V0038Partition.  # noqa: E501
        :type preemption_mode: List[str]
        :param allowed_allocation_nodes: The allowed_allocation_nodes of this V0038Partition.  # noqa: E501
        :type allowed_allocation_nodes: str
        :param allowed_accounts: The allowed_accounts of this V0038Partition.  # noqa: E501
        :type allowed_accounts: str
        :param allowed_groups: The allowed_groups of this V0038Partition.  # noqa: E501
        :type allowed_groups: str
        :param allowed_qos: The allowed_qos of this V0038Partition.  # noqa: E501
        :type allowed_qos: str
        :param alternative: The alternative of this V0038Partition.  # noqa: E501
        :type alternative: str
        :param billing_weights: The billing_weights of this V0038Partition.  # noqa: E501
        :type billing_weights: str
        :param default_memory_per_cpu: The default_memory_per_cpu of this V0038Partition.  # noqa: E501
        :type default_memory_per_cpu: int
        :param default_time_limit: The default_time_limit of this V0038Partition.  # noqa: E501
        :type default_time_limit: int
        :param denied_accounts: The denied_accounts of this V0038Partition.  # noqa: E501
        :type denied_accounts: str
        :param denied_qos: The denied_qos of this V0038Partition.  # noqa: E501
        :type denied_qos: str
        :param preemption_grace_time: The preemption_grace_time of this V0038Partition.  # noqa: E501
        :type preemption_grace_time: int
        :param maximum_cpus_per_node: The maximum_cpus_per_node of this V0038Partition.  # noqa: E501
        :type maximum_cpus_per_node: int
        :param maximum_memory_per_node: The maximum_memory_per_node of this V0038Partition.  # noqa: E501
        :type maximum_memory_per_node: int
        :param maximum_nodes_per_job: The maximum_nodes_per_job of this V0038Partition.  # noqa: E501
        :type maximum_nodes_per_job: int
        :param max_time_limit: The max_time_limit of this V0038Partition.  # noqa: E501
        :type max_time_limit: int
        :param min_nodes_per_job: The min_nodes_per_job of this V0038Partition.  # noqa: E501
        :type min_nodes_per_job: int
        :param name: The name of this V0038Partition.  # noqa: E501
        :type name: str
        :param nodes: The nodes of this V0038Partition.  # noqa: E501
        :type nodes: str
        :param over_time_limit: The over_time_limit of this V0038Partition.  # noqa: E501
        :type over_time_limit: int
        :param priority_job_factor: The priority_job_factor of this V0038Partition.  # noqa: E501
        :type priority_job_factor: int
        :param priority_tier: The priority_tier of this V0038Partition.  # noqa: E501
        :type priority_tier: int
        :param qos: The qos of this V0038Partition.  # noqa: E501
        :type qos: str
        :param state: The state of this V0038Partition.  # noqa: E501
        :type state: str
        :param total_cpus: The total_cpus of this V0038Partition.  # noqa: E501
        :type total_cpus: int
        :param total_nodes: The total_nodes of this V0038Partition.  # noqa: E501
        :type total_nodes: int
        :param tres: The tres of this V0038Partition.  # noqa: E501
        :type tres: str
        :param maximum_memory_per_cpu: The maximum_memory_per_cpu of this V0038Partition.  # noqa: E501
        :type maximum_memory_per_cpu: int
        :param default_memory_per_node: The default_memory_per_node of this V0038Partition.  # noqa: E501
        :type default_memory_per_node: int
        """
        self.swagger_types = {
            'flags': List[str],
            'preemption_mode': List[str],
            'allowed_allocation_nodes': str,
            'allowed_accounts': str,
            'allowed_groups': str,
            'allowed_qos': str,
            'alternative': str,
            'billing_weights': str,
            'default_memory_per_cpu': int,
            'default_time_limit': int,
            'denied_accounts': str,
            'denied_qos': str,
            'preemption_grace_time': int,
            'maximum_cpus_per_node': int,
            'maximum_memory_per_node': int,
            'maximum_nodes_per_job': int,
            'max_time_limit': int,
            'min_nodes_per_job': int,
            'name': str,
            'nodes': str,
            'over_time_limit': int,
            'priority_job_factor': int,
            'priority_tier': int,
            'qos': str,
            'state': str,
            'total_cpus': int,
            'total_nodes': int,
            'tres': str,
            'maximum_memory_per_cpu': int,
            'default_memory_per_node': int
        }

        self.attribute_map = {
            'flags': 'flags',
            'preemption_mode': 'preemption_mode',
            'allowed_allocation_nodes': 'allowed_allocation_nodes',
            'allowed_accounts': 'allowed_accounts',
            'allowed_groups': 'allowed_groups',
            'allowed_qos': 'allowed_qos',
            'alternative': 'alternative',
            'billing_weights': 'billing_weights',
            'default_memory_per_cpu': 'default_memory_per_cpu',
            'default_time_limit': 'default_time_limit',
            'denied_accounts': 'denied_accounts',
            'denied_qos': 'denied_qos',
            'preemption_grace_time': 'preemption_grace_time',
            'maximum_cpus_per_node': 'maximum_cpus_per_node',
            'maximum_memory_per_node': 'maximum_memory_per_node',
            'maximum_nodes_per_job': 'maximum_nodes_per_job',
            'max_time_limit': 'max_time_limit',
            'min_nodes_per_job': 'min_nodes_per_job',
            'name': 'name',
            'nodes': 'nodes',
            'over_time_limit': 'over_time_limit',
            'priority_job_factor': 'priority_job_factor',
            'priority_tier': 'priority_tier',
            'qos': 'qos',
            'state': 'state',
            'total_cpus': 'total_cpus',
            'total_nodes': 'total_nodes',
            'tres': 'tres',
            'maximum_memory_per_cpu': 'maximum_memory_per_cpu',
            'default_memory_per_node': 'default_memory_per_node'
        }
        self._flags = flags
        self._preemption_mode = preemption_mode
        self._allowed_allocation_nodes = allowed_allocation_nodes
        self._allowed_accounts = allowed_accounts
        self._allowed_groups = allowed_groups
        self._allowed_qos = allowed_qos
        self._alternative = alternative
        self._billing_weights = billing_weights
        self._default_memory_per_cpu = default_memory_per_cpu
        self._default_time_limit = default_time_limit
        self._denied_accounts = denied_accounts
        self._denied_qos = denied_qos
        self._preemption_grace_time = preemption_grace_time
        self._maximum_cpus_per_node = maximum_cpus_per_node
        self._maximum_memory_per_node = maximum_memory_per_node
        self._maximum_nodes_per_job = maximum_nodes_per_job
        self._max_time_limit = max_time_limit
        self._min_nodes_per_job = min_nodes_per_job
        self._name = name
        self._nodes = nodes
        self._over_time_limit = over_time_limit
        self._priority_job_factor = priority_job_factor
        self._priority_tier = priority_tier
        self._qos = qos
        self._state = state
        self._total_cpus = total_cpus
        self._total_nodes = total_nodes
        self._tres = tres
        self._maximum_memory_per_cpu = maximum_memory_per_cpu
        self._default_memory_per_node = default_memory_per_node

    @classmethod
    def from_dict(cls, dikt) -> 'V0038Partition':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The v0.0.38_partition of this V0038Partition.  # noqa: E501
        :rtype: V0038Partition
        """
        return util.deserialize_model(dikt, cls)

    @property
    def flags(self) -> List[str]:
        """Gets the flags of this V0038Partition.

        partition options  # noqa: E501

        :return: The flags of this V0038Partition.
        :rtype: List[str]
        """
        return self._flags

    @flags.setter
    def flags(self, flags: List[str]):
        """Sets the flags of this V0038Partition.

        partition options  # noqa: E501

        :param flags: The flags of this V0038Partition.
        :type flags: List[str]
        """

        self._flags = flags

    @property
    def preemption_mode(self) -> List[str]:
        """Gets the preemption_mode of this V0038Partition.

        preemption type  # noqa: E501

        :return: The preemption_mode of this V0038Partition.
        :rtype: List[str]
        """
        return self._preemption_mode

    @preemption_mode.setter
    def preemption_mode(self, preemption_mode: List[str]):
        """Sets the preemption_mode of this V0038Partition.

        preemption type  # noqa: E501

        :param preemption_mode: The preemption_mode of this V0038Partition.
        :type preemption_mode: List[str]
        """

        self._preemption_mode = preemption_mode

    @property
    def allowed_allocation_nodes(self) -> str:
        """Gets the allowed_allocation_nodes of this V0038Partition.

        list names of allowed allocating nodes  # noqa: E501

        :return: The allowed_allocation_nodes of this V0038Partition.
        :rtype: str
        """
        return self._allowed_allocation_nodes

    @allowed_allocation_nodes.setter
    def allowed_allocation_nodes(self, allowed_allocation_nodes: str):
        """Sets the allowed_allocation_nodes of this V0038Partition.

        list names of allowed allocating nodes  # noqa: E501

        :param allowed_allocation_nodes: The allowed_allocation_nodes of this V0038Partition.
        :type allowed_allocation_nodes: str
        """

        self._allowed_allocation_nodes = allowed_allocation_nodes

    @property
    def allowed_accounts(self) -> str:
        """Gets the allowed_accounts of this V0038Partition.

        comma delimited list of accounts  # noqa: E501

        :return: The allowed_accounts of this V0038Partition.
        :rtype: str
        """
        return self._allowed_accounts

    @allowed_accounts.setter
    def allowed_accounts(self, allowed_accounts: str):
        """Sets the allowed_accounts of this V0038Partition.

        comma delimited list of accounts  # noqa: E501

        :param allowed_accounts: The allowed_accounts of this V0038Partition.
        :type allowed_accounts: str
        """

        self._allowed_accounts = allowed_accounts

    @property
    def allowed_groups(self) -> str:
        """Gets the allowed_groups of this V0038Partition.

        comma delimited list of groups  # noqa: E501

        :return: The allowed_groups of this V0038Partition.
        :rtype: str
        """
        return self._allowed_groups

    @allowed_groups.setter
    def allowed_groups(self, allowed_groups: str):
        """Sets the allowed_groups of this V0038Partition.

        comma delimited list of groups  # noqa: E501

        :param allowed_groups: The allowed_groups of this V0038Partition.
        :type allowed_groups: str
        """

        self._allowed_groups = allowed_groups

    @property
    def allowed_qos(self) -> str:
        """Gets the allowed_qos of this V0038Partition.

        comma delimited list of qos  # noqa: E501

        :return: The allowed_qos of this V0038Partition.
        :rtype: str
        """
        return self._allowed_qos

    @allowed_qos.setter
    def allowed_qos(self, allowed_qos: str):
        """Sets the allowed_qos of this V0038Partition.

        comma delimited list of qos  # noqa: E501

        :param allowed_qos: The allowed_qos of this V0038Partition.
        :type allowed_qos: str
        """

        self._allowed_qos = allowed_qos

    @property
    def alternative(self) -> str:
        """Gets the alternative of this V0038Partition.

        name of alternate partition  # noqa: E501

        :return: The alternative of this V0038Partition.
        :rtype: str
        """
        return self._alternative

    @alternative.setter
    def alternative(self, alternative: str):
        """Sets the alternative of this V0038Partition.

        name of alternate partition  # noqa: E501

        :param alternative: The alternative of this V0038Partition.
        :type alternative: str
        """

        self._alternative = alternative

    @property
    def billing_weights(self) -> str:
        """Gets the billing_weights of this V0038Partition.

        TRES billing weights  # noqa: E501

        :return: The billing_weights of this V0038Partition.
        :rtype: str
        """
        return self._billing_weights

    @billing_weights.setter
    def billing_weights(self, billing_weights: str):
        """Sets the billing_weights of this V0038Partition.

        TRES billing weights  # noqa: E501

        :param billing_weights: The billing_weights of this V0038Partition.
        :type billing_weights: str
        """

        self._billing_weights = billing_weights

    @property
    def default_memory_per_cpu(self) -> int:
        """Gets the default_memory_per_cpu of this V0038Partition.

        default MB memory per allocated CPU  # noqa: E501

        :return: The default_memory_per_cpu of this V0038Partition.
        :rtype: int
        """
        return self._default_memory_per_cpu

    @default_memory_per_cpu.setter
    def default_memory_per_cpu(self, default_memory_per_cpu: int):
        """Sets the default_memory_per_cpu of this V0038Partition.

        default MB memory per allocated CPU  # noqa: E501

        :param default_memory_per_cpu: The default_memory_per_cpu of this V0038Partition.
        :type default_memory_per_cpu: int
        """

        self._default_memory_per_cpu = default_memory_per_cpu

    @property
    def default_time_limit(self) -> int:
        """Gets the default_time_limit of this V0038Partition.

        default time limit (minutes)  # noqa: E501

        :return: The default_time_limit of this V0038Partition.
        :rtype: int
        """
        return self._default_time_limit

    @default_time_limit.setter
    def default_time_limit(self, default_time_limit: int):
        """Sets the default_time_limit of this V0038Partition.

        default time limit (minutes)  # noqa: E501

        :param default_time_limit: The default_time_limit of this V0038Partition.
        :type default_time_limit: int
        """

        self._default_time_limit = default_time_limit

    @property
    def denied_accounts(self) -> str:
        """Gets the denied_accounts of this V0038Partition.

        comma delimited list of denied accounts  # noqa: E501

        :return: The denied_accounts of this V0038Partition.
        :rtype: str
        """
        return self._denied_accounts

    @denied_accounts.setter
    def denied_accounts(self, denied_accounts: str):
        """Sets the denied_accounts of this V0038Partition.

        comma delimited list of denied accounts  # noqa: E501

        :param denied_accounts: The denied_accounts of this V0038Partition.
        :type denied_accounts: str
        """

        self._denied_accounts = denied_accounts

    @property
    def denied_qos(self) -> str:
        """Gets the denied_qos of this V0038Partition.

        comma delimited list of denied qos  # noqa: E501

        :return: The denied_qos of this V0038Partition.
        :rtype: str
        """
        return self._denied_qos

    @denied_qos.setter
    def denied_qos(self, denied_qos: str):
        """Sets the denied_qos of this V0038Partition.

        comma delimited list of denied qos  # noqa: E501

        :param denied_qos: The denied_qos of this V0038Partition.
        :type denied_qos: str
        """

        self._denied_qos = denied_qos

    @property
    def preemption_grace_time(self) -> int:
        """Gets the preemption_grace_time of this V0038Partition.

        preemption grace time (seconds)  # noqa: E501

        :return: The preemption_grace_time of this V0038Partition.
        :rtype: int
        """
        return self._preemption_grace_time

    @preemption_grace_time.setter
    def preemption_grace_time(self, preemption_grace_time: int):
        """Sets the preemption_grace_time of this V0038Partition.

        preemption grace time (seconds)  # noqa: E501

        :param preemption_grace_time: The preemption_grace_time of this V0038Partition.
        :type preemption_grace_time: int
        """

        self._preemption_grace_time = preemption_grace_time

    @property
    def maximum_cpus_per_node(self) -> int:
        """Gets the maximum_cpus_per_node of this V0038Partition.

        maximum allocated CPUs per node  # noqa: E501

        :return: The maximum_cpus_per_node of this V0038Partition.
        :rtype: int
        """
        return self._maximum_cpus_per_node

    @maximum_cpus_per_node.setter
    def maximum_cpus_per_node(self, maximum_cpus_per_node: int):
        """Sets the maximum_cpus_per_node of this V0038Partition.

        maximum allocated CPUs per node  # noqa: E501

        :param maximum_cpus_per_node: The maximum_cpus_per_node of this V0038Partition.
        :type maximum_cpus_per_node: int
        """

        self._maximum_cpus_per_node = maximum_cpus_per_node

    @property
    def maximum_memory_per_node(self) -> int:
        """Gets the maximum_memory_per_node of this V0038Partition.

        maximum memory per allocated node (MiB)  # noqa: E501

        :return: The maximum_memory_per_node of this V0038Partition.
        :rtype: int
        """
        return self._maximum_memory_per_node

    @maximum_memory_per_node.setter
    def maximum_memory_per_node(self, maximum_memory_per_node: int):
        """Sets the maximum_memory_per_node of this V0038Partition.

        maximum memory per allocated node (MiB)  # noqa: E501

        :param maximum_memory_per_node: The maximum_memory_per_node of this V0038Partition.
        :type maximum_memory_per_node: int
        """

        self._maximum_memory_per_node = maximum_memory_per_node

    @property
    def maximum_nodes_per_job(self) -> int:
        """Gets the maximum_nodes_per_job of this V0038Partition.

        Max nodes per job  # noqa: E501

        :return: The maximum_nodes_per_job of this V0038Partition.
        :rtype: int
        """
        return self._maximum_nodes_per_job

    @maximum_nodes_per_job.setter
    def maximum_nodes_per_job(self, maximum_nodes_per_job: int):
        """Sets the maximum_nodes_per_job of this V0038Partition.

        Max nodes per job  # noqa: E501

        :param maximum_nodes_per_job: The maximum_nodes_per_job of this V0038Partition.
        :type maximum_nodes_per_job: int
        """

        self._maximum_nodes_per_job = maximum_nodes_per_job

    @property
    def max_time_limit(self) -> int:
        """Gets the max_time_limit of this V0038Partition.

        Max time limit per job  # noqa: E501

        :return: The max_time_limit of this V0038Partition.
        :rtype: int
        """
        return self._max_time_limit

    @max_time_limit.setter
    def max_time_limit(self, max_time_limit: int):
        """Sets the max_time_limit of this V0038Partition.

        Max time limit per job  # noqa: E501

        :param max_time_limit: The max_time_limit of this V0038Partition.
        :type max_time_limit: int
        """

        self._max_time_limit = max_time_limit

    @property
    def min_nodes_per_job(self) -> int:
        """Gets the min_nodes_per_job of this V0038Partition.

        Min number of nodes per job  # noqa: E501

        :return: The min_nodes_per_job of this V0038Partition.
        :rtype: int
        """
        return self._min_nodes_per_job

    @min_nodes_per_job.setter
    def min_nodes_per_job(self, min_nodes_per_job: int):
        """Sets the min_nodes_per_job of this V0038Partition.

        Min number of nodes per job  # noqa: E501

        :param min_nodes_per_job: The min_nodes_per_job of this V0038Partition.
        :type min_nodes_per_job: int
        """

        self._min_nodes_per_job = min_nodes_per_job

    @property
    def name(self) -> str:
        """Gets the name of this V0038Partition.

        Partition name  # noqa: E501

        :return: The name of this V0038Partition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this V0038Partition.

        Partition name  # noqa: E501

        :param name: The name of this V0038Partition.
        :type name: str
        """

        self._name = name

    @property
    def nodes(self) -> str:
        """Gets the nodes of this V0038Partition.

        list names of nodes in partition  # noqa: E501

        :return: The nodes of this V0038Partition.
        :rtype: str
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes: str):
        """Sets the nodes of this V0038Partition.

        list names of nodes in partition  # noqa: E501

        :param nodes: The nodes of this V0038Partition.
        :type nodes: str
        """

        self._nodes = nodes

    @property
    def over_time_limit(self) -> int:
        """Gets the over_time_limit of this V0038Partition.

        job's time limit can be exceeded by this number of minutes before cancellation  # noqa: E501

        :return: The over_time_limit of this V0038Partition.
        :rtype: int
        """
        return self._over_time_limit

    @over_time_limit.setter
    def over_time_limit(self, over_time_limit: int):
        """Sets the over_time_limit of this V0038Partition.

        job's time limit can be exceeded by this number of minutes before cancellation  # noqa: E501

        :param over_time_limit: The over_time_limit of this V0038Partition.
        :type over_time_limit: int
        """

        self._over_time_limit = over_time_limit

    @property
    def priority_job_factor(self) -> int:
        """Gets the priority_job_factor of this V0038Partition.

        job priority weight factor  # noqa: E501

        :return: The priority_job_factor of this V0038Partition.
        :rtype: int
        """
        return self._priority_job_factor

    @priority_job_factor.setter
    def priority_job_factor(self, priority_job_factor: int):
        """Sets the priority_job_factor of this V0038Partition.

        job priority weight factor  # noqa: E501

        :param priority_job_factor: The priority_job_factor of this V0038Partition.
        :type priority_job_factor: int
        """

        self._priority_job_factor = priority_job_factor

    @property
    def priority_tier(self) -> int:
        """Gets the priority_tier of this V0038Partition.

        tier for scheduling and preemption  # noqa: E501

        :return: The priority_tier of this V0038Partition.
        :rtype: int
        """
        return self._priority_tier

    @priority_tier.setter
    def priority_tier(self, priority_tier: int):
        """Sets the priority_tier of this V0038Partition.

        tier for scheduling and preemption  # noqa: E501

        :param priority_tier: The priority_tier of this V0038Partition.
        :type priority_tier: int
        """

        self._priority_tier = priority_tier

    @property
    def qos(self) -> str:
        """Gets the qos of this V0038Partition.

        partition QOS name  # noqa: E501

        :return: The qos of this V0038Partition.
        :rtype: str
        """
        return self._qos

    @qos.setter
    def qos(self, qos: str):
        """Sets the qos of this V0038Partition.

        partition QOS name  # noqa: E501

        :param qos: The qos of this V0038Partition.
        :type qos: str
        """

        self._qos = qos

    @property
    def state(self) -> str:
        """Gets the state of this V0038Partition.

        Partition state  # noqa: E501

        :return: The state of this V0038Partition.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this V0038Partition.

        Partition state  # noqa: E501

        :param state: The state of this V0038Partition.
        :type state: str
        """

        self._state = state

    @property
    def total_cpus(self) -> int:
        """Gets the total_cpus of this V0038Partition.

        Total cpus in partition  # noqa: E501

        :return: The total_cpus of this V0038Partition.
        :rtype: int
        """
        return self._total_cpus

    @total_cpus.setter
    def total_cpus(self, total_cpus: int):
        """Sets the total_cpus of this V0038Partition.

        Total cpus in partition  # noqa: E501

        :param total_cpus: The total_cpus of this V0038Partition.
        :type total_cpus: int
        """

        self._total_cpus = total_cpus

    @property
    def total_nodes(self) -> int:
        """Gets the total_nodes of this V0038Partition.

        Total number of nodes in partition  # noqa: E501

        :return: The total_nodes of this V0038Partition.
        :rtype: int
        """
        return self._total_nodes

    @total_nodes.setter
    def total_nodes(self, total_nodes: int):
        """Sets the total_nodes of this V0038Partition.

        Total number of nodes in partition  # noqa: E501

        :param total_nodes: The total_nodes of this V0038Partition.
        :type total_nodes: int
        """

        self._total_nodes = total_nodes

    @property
    def tres(self) -> str:
        """Gets the tres of this V0038Partition.

        configured TRES in partition  # noqa: E501

        :return: The tres of this V0038Partition.
        :rtype: str
        """
        return self._tres

    @tres.setter
    def tres(self, tres: str):
        """Sets the tres of this V0038Partition.

        configured TRES in partition  # noqa: E501

        :param tres: The tres of this V0038Partition.
        :type tres: str
        """

        self._tres = tres

    @property
    def maximum_memory_per_cpu(self) -> int:
        """Gets the maximum_memory_per_cpu of this V0038Partition.

        maximum memory per allocated CPU (MiB)  # noqa: E501

        :return: The maximum_memory_per_cpu of this V0038Partition.
        :rtype: int
        """
        return self._maximum_memory_per_cpu

    @maximum_memory_per_cpu.setter
    def maximum_memory_per_cpu(self, maximum_memory_per_cpu: int):
        """Sets the maximum_memory_per_cpu of this V0038Partition.

        maximum memory per allocated CPU (MiB)  # noqa: E501

        :param maximum_memory_per_cpu: The maximum_memory_per_cpu of this V0038Partition.
        :type maximum_memory_per_cpu: int
        """

        self._maximum_memory_per_cpu = maximum_memory_per_cpu

    @property
    def default_memory_per_node(self) -> int:
        """Gets the default_memory_per_node of this V0038Partition.

        default MB memory per allocated node  # noqa: E501

        :return: The default_memory_per_node of this V0038Partition.
        :rtype: int
        """
        return self._default_memory_per_node

    @default_memory_per_node.setter
    def default_memory_per_node(self, default_memory_per_node: int):
        """Sets the default_memory_per_node of this V0038Partition.

        default MB memory per allocated node  # noqa: E501

        :param default_memory_per_node: The default_memory_per_node of this V0038Partition.
        :type default_memory_per_node: int
        """

        self._default_memory_per_node = default_memory_per_node
